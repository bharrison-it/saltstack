#!/bin/bash
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check_MK agent plugin for monitoring ORACLE databases
# This plugin is a result of the common work of Thorsten Bruhns
# and Mathias Kettner. Thorsten is responsible for the ORACLE
# stuff, Mathias for the shell hacking...

#   .--Config--------------------------------------------------------------.
#   |                     ____             __ _                            |
#   |                    / ___|___  _ __  / _(_) __ _                      |
#   |                   | |   / _ \| '_ \| |_| |/ _` |                     |
#   |                   | |__| (_) | | | |  _| | (_| |                     |
#   |                    \____\___/|_| |_|_| |_|\__, |                     |
#   |                                           |___/                      |
#   +----------------------------------------------------------------------+
#   | The user can override and set variables in mk_oracle.cfg             |
#   '----------------------------------------------------------------------'

# Sections that run fast and do no caching
SYNC_SECTIONS="instance sessions logswitches undostat recovery_area processes recovery_status"

# Sections that are run in the background and at a larger interval.
# Note: sections not listed in SYNC_SECTIONS or ASYNC_SECTIONS will not be
# executed at all!
ASYNC_SECTIONS="tablespaces rman jobs ts_quotas resumable"

# Sections that are run in the background and at a larger interval.
# Note: _ASM_ sections are only executed when SID starts with '+'
#       sections listed in SYNC_SECTIONS or ASYNC_SECTIONS are not
#       executed for ASM.
ASYNC_ASM_SECTIONS=""

# Interval for running async checks (in seconds)
CACHE_MAXAGE=600

# You can specify a list of SIDs to monitor. Those databases will
# only be handled, if they are found running, though!
#
#   ONLY_SIDS="XE ORCL FOO BAR"
#
# It is possible to filter SIDS negatively. Just add the following to
# the mk_oracle.cfg file:
#
#   EXCLUDE_<sid>="ALL"
#
# Another option is to filter single checks for SIDS. Just add
# lines as follows to the mk_oracle.cfg file. One service per
# line:
#
#   EXCLUDE_<sid>="<service>"
#
# For example skip oracle_sessions and oracle_logswitches checks
# for the instance "mysid".
#
#   EXCLUDE_mysid="sessions logswitches"
#

# Source the optional configuration file for this agent plugin
if [ -e "$MK_CONFDIR/mk_oracle.cfg" ]
then
    . $MK_CONFDIR/mk_oracle.cfg
fi

#.
#   .--SQL Queries---------------------------------------------------------.
#   |        ____   ___  _        ___                  _                   |
#   |       / ___| / _ \| |      / _ \ _   _  ___ _ __(_) ___  ___         |
#   |       \___ \| | | | |     | | | | | | |/ _ \ '__| |/ _ \/ __|        |
#   |        ___) | |_| | |___  | |_| | |_| |  __/ |  | |  __/\__ \        |
#   |       |____/ \__\_\_____|  \__\_\\__,_|\___|_|  |_|\___||___/        |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | The following functions create SQL queries for ORACLE and output     |
#   | them to stdout. All queries output the database name or the instane  |
#   | name as first column.                                                |
#   '----------------------------------------------------------------------'

sql_tablespaces()
{
    echo 'PROMPT <<<oracle_tablespaces:sep(124)>>>'
    echo "select upper(d.NAME) || '|' || file_name ||'|'|| tablespace_name ||'|'|| fstatus ||'|'|| AUTOEXTENSIBLE
              ||'|'|| blocks ||'|'|| maxblocks ||'|'|| USER_BLOCKS ||'|'|| INCREMENT_BY
              ||'|'|| ONLINE_STATUS ||'|'|| BLOCK_SIZE
              ||'|'|| decode(tstatus,'READ ONLY', 'READONLY', tstatus) || '|' || free_blocks
              ||'|'|| contents
       from v\$database d , (
                select f.file_name, f.tablespace_name, f.status fstatus, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY,
                f.ONLINE_STATUS, t.BLOCK_SIZE, t.status tstatus, nvl(sum(fs.blocks),0) free_blocks, t.contents
                from dba_data_files f, dba_tablespaces t, dba_free_space fs
                where f.tablespace_name = t.tablespace_name
                and f.file_id = fs.file_id(+)
                group by f.file_name, f.tablespace_name, f.status, f.autoextensible,
                f.blocks, f.maxblocks, f.user_blocks, f.increment_by, f.online_status,
                t.block_size, t.status, t.contents
                UNION
                select f.file_name, f.tablespace_name, f.status, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY, 'TEMP',
                t.BLOCK_SIZE, t.status, sum(sh.blocks_free) free_blocks, 'TEMPORARY'
                from v\$thread th, dba_temp_files f, dba_tablespaces t, v\$temp_space_header sh
                WHERE f.tablespace_name = t.tablespace_name and f.file_id = sh.file_id
                GROUP BY th.instance, f.file_name, f.tablespace_name, f.status,
                f.autoextensible, f.blocks, f.maxblocks, f.user_blocks, f.increment_by,
                'TEMP', t.block_size, t.status);
          "
}

sql_92_tablespaces()
{
    echo 'PROMPT <<<oracle_tablespaces:sep(124)>>>'
    echo "select upper(d.NAME) || '|' || file_name ||'|'|| tablespace_name ||'|'|| fstatus ||'|'|| AUTOEXTENSIBLE
              ||'|'|| blocks ||'|'|| maxblocks ||'|'|| USER_BLOCKS ||'|'|| INCREMENT_BY
              ||'|'|| ONLINE_STATUS ||'|'|| BLOCK_SIZE
              ||'|'|| decode(tstatus,'READ ONLY', 'READONLY', tstatus) || '|' || free_blocks
              ||'|'|| contents
       from v\$database d , (
                select f.file_name, f.tablespace_name, f.status fstatus, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY,
                'ONLINE' ONLINE_STATUS, t.BLOCK_SIZE, t.status tstatus, nvl(sum(fs.blocks),0) free_blocks, t.contents
                from dba_data_files f, dba_tablespaces t, dba_free_space fs
                where f.tablespace_name = t.tablespace_name
                and f.file_id = fs.file_id(+)
                group by f.file_name, f.tablespace_name, f.status, f.autoextensible,
                f.blocks, f.maxblocks, f.user_blocks, f.increment_by, 'ONLINE',
                t.block_size, t.status, t.contents
                UNION
                select f.file_name, f.tablespace_name, 'ONLINE' status, f.AUTOEXTENSIBLE,
                f.blocks, f.maxblocks, f.USER_BLOCKS, f.INCREMENT_BY, 'TEMP',
                t.BLOCK_SIZE, 'TEMP' status, sum(sh.blocks_free) free_blocks, 'TEMPORARY'
                from v\$thread th, dba_temp_files f, dba_tablespaces t, v\$temp_space_header sh
                WHERE f.tablespace_name = t.tablespace_name and f.file_id = sh.file_id
                GROUP BY th.instance, f.file_name, f.tablespace_name, 'ONLINE',
                f.autoextensible, f.blocks, f.maxblocks, f.user_blocks, f.increment_by,
                'TEMP', t.block_size, t.status);
          "
}

sql_recovery_status()
{
    echo 'PROMPT <<<oracle_recovery_status:sep(124)>>>'
    echo "SELECT upper(d.NAME)
                 ||'|'|| d.DB_UNIQUE_NAME
                 ||'|'|| d.DATABASE_ROLE
                 ||'|'|| d.open_mode
                 ||'|'|| dh.file#
                 ||'|'|| round((dh.CHECKPOINT_TIME-to_date('01.01.1970','dd.mm.yyyy'))*24*60*60)
                 ||'|'|| round((sysdate-dh.CHECKPOINT_TIME)*24*60*60)
                 ||'|'|| dh.STATUS
                 ||'|'|| dh.RECOVER
                 ||'|'|| dh.FUZZY
                 ||'|'|| dh.CHECKPOINT_CHANGE#
          FROM  V\$datafile_header dh, v\$database d, v\$instance i
          ORDER BY dh.file#;
         "
}

sql_rman()
{
    echo 'PROMPT <<<oracle_rman:sep(124)>>>'
    echo "SELECT upper(d.NAME)
                 ||'|'|| a.STATUS
                 ||'|'|| to_char(a.START_TIME, 'YYYY-mm-dd_HH24:MI:SS')
                 ||'|'|| to_char(a.END_TIME, 'YYYY-mm-dd_HH24:MI:SS')
                 ||'|'|| replace(b.INPUT_TYPE, ' ', '_')
                 ||'|'|| round(((sysdate - END_TIME) * 24 * 60),0)
                 FROM V\$RMAN_BACKUP_JOB_DETAILS a, v\$database d,
                      (SELECT input_type, max(command_id) as command_id
                       FROM V\$RMAN_BACKUP_JOB_DETAILS
                      WHERE START_TIME > sysdate-14
                        and STATUS<>'RUNNING' GROUP BY input_type) b
                 WHERE a.COMMAND_ID = b.COMMAND_ID;
         "
}

sql_recovery_area()
{
    echo 'PROMPT <<<oracle_recovery_area>>>'
    echo "select upper(d.NAME)
                 ||' '|| round((SPACE_USED-SPACE_RECLAIMABLE)/
                           (CASE NVL(SPACE_LIMIT,1) WHEN 0 THEN 1 ELSE SPACE_LIMIT END)*100)
                 ||' '|| round(SPACE_LIMIT/1024/1024)
                 ||' '|| round(SPACE_USED/1024/1024)
                 ||' '|| round(SPACE_RECLAIMABLE/1024/1024)
          from V\$RECOVERY_FILE_DEST, v\$database d;
         "
}

sql_92_undostat()
{
    # TUNED_UNDORETENTION and ACTIVEBLKS are not availibe in Oracle <=9.2!
    # we sent a -1 for filtering in check_undostat
    echo 'PROMPT <<<oracle_undostat>>>'
    echo "select upper(i.INSTANCE_NAME)
                 ||' -1'
                 ||' '|| MAXCONCURRENCY
                 ||' -1'
                 ||' '|| maxquerylen
                 ||' '|| NOSPACEERRCNT
          from v\$instance i,
              (select * from (select *
                              from v\$undostat order by end_time desc
                             )
                        where rownum = 1
              );
         "
}

sql_undostat()
{
    echo 'PROMPT <<<oracle_undostat>>>'
    echo "select upper(i.INSTANCE_NAME)
                 ||' '|| ACTIVEBLKS
                 ||' '|| MAXCONCURRENCY
                 ||' '|| TUNED_UNDORETENTION
                 ||' '|| maxquerylen
                 ||' '|| NOSPACEERRCNT
          from v\$instance i,
              (select * from (select *
                              from v\$undostat order by end_time desc
                             )
                        where rownum = 1
                        and TUNED_UNDORETENTION > 0
              );
         "
}

sql_resumable()
{
    echo 'PROMPT <<<oracle_resumable:sep(124)>>>'
    echo "select upper(i.INSTANCE_NAME)
                 ||'|'|| u.username
                 ||'|'|| a.SESSION_ID
                 ||'|'|| a.status
                 ||'|'|| a.TIMEOUT
                 ||'|'|| round((sysdate-to_date(a.SUSPEND_TIME,'mm/dd/yy hh24:mi:ss'))*24*60*60)
                 ||'|'|| a.ERROR_NUMBER
                 ||'|'|| to_char(to_date(a.SUSPEND_TIME, 'mm/dd/yy hh24:mi:ss'),'mm/dd/yy_hh24:mi:ss')
                 ||'|'|| a.RESUME_TIME
                 ||'|'|| a.ERROR_MSG
          from dba_resumable a, v\$instance i, dba_users u
          where a.INSTANCE_ID = i.INSTANCE_NUMBER
          and u.user_id = a.user_id
          and a.SUSPEND_TIME is not null
          union all
          select upper(i.INSTANCE_NAME)
                 || '|||||||||'
          from v\$instance i
;
         "
}

sql_jobs()
{
    echo 'PROMPT <<<oracle_jobs>>>'
    echo "SELECT upper(d.NAME)
                 ||' '|| j.OWNER
                 ||' '|| j.JOB_NAME
                 ||' '|| j.STATE
                 ||' '|| ROUND((TRUNC(sysdate) + j.LAST_RUN_DURATION - TRUNC(sysdate)) * 86400)
                 ||' '|| j.RUN_COUNT
                 ||' '|| j.ENABLED
                 ||' '|| NVL(j.NEXT_RUN_DATE, to_date('1970-01-01', 'YYYY-mm-dd'))
                 ||' '|| NVL(j.SCHEDULE_NAME, '-')
                 ||' '|| d.STATUS
          FROM dba_scheduler_jobs j, dba_scheduler_job_run_details d, v\$database d
          WHERE d.owner=j.OWNER AND d.JOB_NAME=j.JOB_NAME
            AND d.LOG_ID=(SELECT max(LOG_ID) FROM dba_scheduler_job_run_details dd
                          WHERE dd.owner=j.OWNER and dd.JOB_NAME=j.JOB_NAME
                         );
         "
}

sql_ts_quotas()
{
    echo 'PROMPT <<<oracle_ts_quotas:sep(124)>>>'
    echo "select upper(d.NAME)
                 ||'|'|| Q.USERNAME
                 ||'|'|| Q.TABLESPACE_NAME
                 ||'|'|| Q.BYTES
                 ||'|'|| Q.MAX_BYTES
          from dba_ts_quotas Q, v\$database d
          where max_bytes > 0
          union all
          select upper(d.NAME)
                 ||'|||'
          from v\$database d
          order by 1;
         "
}


sql_version()
{
    echo 'PROMPT <<<oracle_version>>>'
    echo "select upper(i.INSTANCE_NAME)
	  || ' ' || banner
	  from v\$version, v\$instance i
	  where banner like 'Oracle%';"
}

sql_instance()
{
    echo 'prompt <<<oracle_instance:sep(124)>>>'
    echo "select upper(i.instance_name)
	          || '|' || i.VERSION
	          || '|' || i.STATUS
	          || '|' || i.LOGINS
	          || '|' || i.ARCHIVER
                  || '|' || round((sysdate - i.startup_time) * 24*60*60)
                  || '|' || DBID
                  || '|' || LOG_MODE
                  || '|' || DATABASE_ROLE
                  || '|' || FORCE_LOGGING
	          || '|' || d.name
           from v\$instance i, v\$database d;
         "
}

sql_sessions()
{
    echo 'prompt <<<oracle_sessions>>>'
    echo "select upper(i.instance_name)
                  || ' ' || CURRENT_UTILIZATION
           from v\$resource_limit, v\$instance i
           where RESOURCE_NAME = 'sessions';
         "
}

sql_processes()
{
    echo 'prompt <<<oracle_processes>>>'
    echo "select upper(i.instance_name)
                  || ' ' || CURRENT_UTILIZATION
                  || ' ' || ltrim(rtrim(LIMIT_VALUE))
           from v\$resource_limit, v\$instance i
           where RESOURCE_NAME = 'processes';
         "
}

sql_logswitches()
{
    echo 'prompt <<<oracle_logswitches>>>'
    echo "select upper(i.instance_name)
                  || ' ' || logswitches
           from v\$instance i ,
                (select count(1) logswitches
                 from v\$loghist
                 where first_time > sysdate - 1/24
                );
         "
}

sql_112_asm_diskgroup()
{
    echo 'prompt <<<oracle_asm_diskgroup>>>'
    echo "select STATE
                 || ' ' || TYPE
                 || ' ' || 'N'
                 || ' ' || sector_size
                 || ' ' || block_size
                 || ' ' || allocation_unit_size
                 || ' ' || total_mb
                 || ' ' || free_mb
                 || ' ' || required_mirror_free_mb
                 || ' ' || usable_file_mb
                 || ' ' || offline_disks
                 || ' ' || voting_files
                 || ' ' || name || '/'
            from v\$asm_diskgroup;
         "
}

# Runs a command asynchronous by use of a cache file
function run_cached () {
    local section=
    if [ "$1" = -s ] ; then local section="echo '<<<$2>>>' ; " ; shift ; fi
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$section$@"

    if [ ! -d $MK_CONFDIR/cache ]; then mkdir -p $MK_CONFDIR/cache ; fi
    CACHEFILE="$MK_CONFDIR/cache/$NAME.cache"

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    local NOW=$(date +%s)
    if [ -e "$CACHEFILE.new" ] ; then
        local CF_ATIME=$(stat -c %X "$CACHEFILE.new")
        if [ $((NOW - CF_ATIME)) -ge $((MAXAGE * 2)) ] ; then
            return
        fi
    fi


    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ] ; then
        local MTIME=$(stat -c %Y "$CACHEFILE")
        if [ $((NOW - MTIME)) -le $MAXAGE ] ; then local USE_CACHEFILE=1 ; fi
        # Output the file in any case, even if it is
        # outdated. The new file will not yet be available
        cat "$CACHEFILE"
    fi

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" -a ! -e "$CACHEFILE.new" ] ; then
        echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; $CMDLINE && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup bash 2>/dev/null &
    fi
}

#
#   .--Functions-----------------------------------------------------------.
#   |             _____                 _   _                              |
#   |            |  ___|   _ _ __   ___| |_(_) ___  _ __  ___              |
#   |            | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|             |
#   |            |  _|| |_| | | | | (__| |_| | (_) | | | \__ \             |
#   |            |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/             |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Helper functions                                                     |
#   '----------------------------------------------------------------------'

# Helper function that calls an SQL statement with a clean output
# Usage: echo "..." | sqlplus SID
function sqlplus ()
{
    local SID=$1
    if OUTPUT=$({ echo 'set pages 0 trimspool on feedback off lines 8000' ; echo 'whenever sqlerror exit 1'; cat ; } | $MK_CONFDIR/sqlplus.sh $SID)
    then
        echo "$OUTPUT"
    else
        echo '<<<oracle_instance:sep(124)>>>'
        local SID_UPPER=$(echo "$SID" | tr '[:lower:]' '[:upper:]')
        echo "$OUTPUT" | sed -r -e "/^(ERROR:)?$/d" | tr '\n' ' ' | sed "s/^/$SID_UPPER|FAILURE|/" ; echo
        return 1
    fi
}

function remove_excluded_sections ()
{
    local sections="$1"
    local excluded="$2"
    local result=""
    for section in $sections
    do
        local skip=
        for exclude in $excluded
        do
            if [ "$exclude" = "$section" ] ; then
                local skip=yes
                break
            fi
        done
        if [ "$skip" != yes ] ; then
            result="$result $section"
        fi
    done
    echo "$result"
}


# Create one SQL statements for several sections and run
# these with sqlplus. The exitcode is preserved.
function do_sync_checks ()
{
    local SID=$1
    local SECTIONS="$2"
    for section in $SECTIONS
    do
        eval "sql_$section"
    done | sqlplus $SID
}

function do_async_checks ()
{
    local SID=$1
    echo "$ASYNC_SQL" | sqlplus $SID
}

# Make sure that the new shell that is being run by run_cached inherits
# our functions
export -f sqlplus
export -f do_async_checks

#.
#   .--Main----------------------------------------------------------------.
#   |                        __  __       _                                |
#   |                       |  \/  | __ _(_)_ __                           |
#   |                       | |\/| |/ _` | | '_ \                          |
#   |                       | |  | | (_| | | | | |                         |
#   |                       |_|  |_|\__,_|_|_| |_|                         |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Iterate over all instances and execute sync and async sections.     |
#   '----------------------------------------------------------------------'

# Get list of all running databases
# Do not work on ASM in this plugin. => Ignore a running ASM-Instance!
SIDS=$(UNIX95=true ps -ef | awk '{print $NF}' | grep -E '^asm_pmon_|^ora_pmon_|^xe_pmon_XE' | cut -d"_" -f3)

# If we do not have found any running database instance, then either
# no ORACLE is present on this system or it's just currently not running.
# In the later case we ouput empty agent sections so that Check_MK will be
# happy and execute the actual check functions.
if [ -z "$SIDS" -a ! -e "$MK_CONFDIR/mk_oracle.found" ] ; then
    exit
fi

# From now on we expect databases on this system (for ever)
touch $MK_CONFDIR/mk_oracle.found

# Make sure that always all sections are present, even
# in case of an error. Note: the section <<<oracle_instance>>>
# section shows the general state of a database instance. If
# that section fails for an instance then all other sections
# do not contain valid data anyway.
for section in $SYNC_SECTIONS $ASYNC_SECTIONS $ASYNC_ASM_SECTIONS
do
    # cut the leading number from sections with sed
    echo "<<<oracle_"$(echo $section | sed "s/^[0-9]*_//")">>>"
done

for SID in $SIDS
do
    # We need the SID in uppercase at later time
    SID_UPPER=$(echo $SID | tr '[:lower:]' '[:upper:]')

    # Check if SID is listed in ONLY_SIDS if this is used
    if [ "$ONLY_SIDS" ] ; then
        SKIP=yes
        for S in $ONLY_SIDS ; do
	    if  [ "$S" = "$SID" ] ; then
                SKIP=
                break
            fi
        done
        if [ "$SKIP" ] ; then continue ; fi
    fi

    # Handle explicit exclusion of instances
    EXCLUDE=EXCLUDE_$SID
    EXCLUDE=${!EXCLUDE}
    # SID filtered totally?
    if [ "$EXCLUDE" = "ALL" ]; then
        continue
    fi

    if [ ${SID:0:1} = '+' ] ; then
        # switch sections to ASM
        SYNC_SECTIONS_OLD=${SYNC_SECTIONS}
        ASYNC_SECTIONS_OLD=${ASYNC_SECTIONS}

        ASYNC_SECTIONS=${ASYNC_ASM_SECTIONS}
        SYNC_SECTIONS=${SYNC_ASM_SECTIONS}
    fi

    # Do sync checks
    EXCLUDED=$(eval 'echo $EXCLUDE'"_$SID")
    SECTIONS=$(remove_excluded_sections "$SYNC_SECTIONS" "$EXCLUDED")
    do_sync_checks $SID "$SECTIONS"

    # Do async checks
    SECTIONS=$(remove_excluded_sections "$ASYNC_SECTIONS" "$EXCLUDED")
    ASYNC_SQL=$(for section in $SECTIONS ; do eval "sql_$section" ; done)
    export ASYNC_SQL
    run_cached oracle_$SID $CACHE_MAXAGE do_async_checks $SID

    if [ ${SID:0:1} = '+' ] ; then
        ASYNC_SECTIONS=${ASYNC_SECTIONS_OLD}
        SYNC_SECTIONS=${SYNC_SECTIONS_OLD}
    fi
done


