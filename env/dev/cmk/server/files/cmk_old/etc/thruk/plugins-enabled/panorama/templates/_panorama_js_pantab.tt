Ext.define('TP.Pantab', {
    extend: 'Ext.panel.Panel',

    title:       'Dashboard',
    [% UNLESS readonly %]
    tooltip:     'double click to rename',
    closable:    true,
    [% ELSE %]
    closable:    false,
    [% END %]
    stateful:    true,
    window_ids:  false,
    stateEvents: ['add', 'titlechange'],
    initComponent: function() {
        this.callParent();
        this.window_ids = [];
    },
    listeners: {
        beforedestroy: function( This, eOpts ) {
            for(var nr=0; nr<This.window_ids; nr++) {
                Ext.getCmp(This.window_ids[nr]).destroy();
            }
            var tabpan = Ext.getCmp('tabpan');
            tabpan.item_ids = TP.removeFromList(tabpan.item_ids, this.id);
            tabpan.saveState();
            cp.clear(this.id);
        },
        activate: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) { // may not yet exists due to delayed rendering
                    panlet.show(false);
                }
            }
            // save current active tab unless we are in tab rotation mode
            var tabpan = Ext.getCmp('tabpan');
            if(tabpan.xdata.rotate_tabs <= 0) {
                tabpan.saveState();
            }
        },
        hide: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet && !panlet.xdata.pinned) {
                    panlet.hide(false);
                }
            }
        },
        afterrender: function(This, eOpts) {
            var header = This.getDockedItems()[0];
            if(header) { header.hide() }
        },
        beforerender: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet && !panlet.xdata.pinned) {
                    panlet.hide();
                }
            }
        }
    },
    getState: function() {
        return {
            title:      this.title,
            window_ids: this.window_ids
        }
    },
    applyState: function(state) {
        if(state) {
            for(var nr=0; nr<state.window_ids.length; nr++) {
                if(state.window_ids[nr]) {
                    // delayed panlet creation
                    var autoshow = false;
                    var delay    = TP.initial_create_delay_inactive;
                    if(TP.initial_active_tab != undefined && this.id == TP.initial_active_tab) {
                        autoshow = true;
                        delay    = TP.initial_create_delay_active;
                    }
                    window.setTimeout(Ext.bind(TP.add_panlet, this, [{id:state.window_ids[nr], skip_state:true, tb:this, autoshow:autoshow}, false]), delay);

                    if(autoshow) {
                       TP.initial_create_delay_active   = TP.initial_create_delay_active   + 200;
                    } else {
                       TP.initial_create_delay_inactive = TP.initial_create_delay_inactive + 50;
                    }
                }
            };
            // make sure all refresh timers are running now
            if(TP.startAllPanelRefreshTimeout) {
                window.clearTimeout(TP.startAllPanelRefreshTimeout);
            }
            TP.startAllPanelRefreshTimeout = window.setTimeout(TP.startAllPanelRefresh, TP.initial_create_delay_inactive + 2000);
            this.window_ids = state.window_ids;
            this.setTitle(state.title);
            Ext.apply(this, state);
        } else {
            TP.initialized = true;
            if(TP.initMask) { TP.initMask.destroy() }
        }
    }
});
