Ext.define('TP.Pantab', {
    extend: 'Ext.panel.Panel',

    [% UNLESS readonly %]
    tooltip:     'double click to rename',
    closable:    true,
    bodyCls:     'pantabbody',
    [% ELSE %]
    closable:    false,
    [% END %]
    stateful:    true,
    stateEvents: ['add', 'titlechange'],
    initComponent: function() {
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        // defaults are set in panorama.pm

        // fetch window ids from ExtState
        this.window_ids = [];
        for(var key in ExtState) {
            var matches = key.match(/^(tabpan-tab_\d+)_panlet_(\d+)$/);
            if(matches && matches[1] == this.id) {
                this.window_ids.push(key);
            }
        }

        if(TP.initial_active_tab && TP.initial_active_tab == this.id && TP.initMask == undefined && this.window_ids.length > 1) {
            TP.initial_create_delay_active   = 0;
            TP.initial_create_delay_inactive = 0;
            TP.cur_panels                    = 1;
            TP.num_panels                    = this.window_ids.length;
            TP.initMask = new Ext.LoadMask(Ext.getBody(), {msg:"loading panel "+TP.cur_panels+'/'+TP.num_panels+"..."});
            TP.initMask.show();
            this.keepMask = true;
        }

        // contains the currently active backends
        this.activeBackends = undefined;
        this.callParent();
    },
    listeners: {
        beforeclose: function( This, eOpts ) {
            var tabpan = Ext.getCmp('tabpan');
            tabpan.saveState(); // recalculate open_tabs
            if(tabpan.open_tabs.length <= 1) {
                TP.Msg.msg("info_message~~cannot close last dashboard.");
                return false;
            }
            return true;
        },
        destroy: function( This, eOpts ) {
            var tabpan = Ext.getCmp('tabpan');
            var window_ids = TP.clone(This.window_ids);
            for(var nr=0; nr<window_ids.length; nr++) {
                Ext.getCmp(window_ids[nr]).destroy();
            }
            cp.clear(This.id);
            // activate first tab
            if(!tabpan.getActiveTab()) {
                var tabs = Ext.query('.x-tab-closable');
                for(var nr=0; nr<tabs.length; nr++) {
                    if(tabpan.tabs_tr[tabs[nr].id] != undefined) {
                        tabpan.setActiveTab(tabpan.tabs_tr[tabs[nr].id]);
                    }
                }
            }
            tabpan.saveState();
        },
        activate: function(This, eOpts) {
            var delay = 0;
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) { // may not yet exists due to delayed rendering
                    try {    // so allow it to fail
                        if(panlet.rendered == false) {
                            /* delay initial show when its not yet rendered */
                            window.setTimeout(Ext.bind(panlet.show, panlet, []), delay);
                            delay = delay + 50;
                        } else {
                            panlet.show(false);
                        }
                    } catch(e) { debug(e) }
                }
            }
            // save current active tab unless we are in tab rotation mode
            var tabpan = Ext.getCmp('tabpan');
            if(tabpan.xdata.rotate_tabs <= 0) {
                tabpan.saveState();
            }
            set_hash(this.id.replace(/^tabpan-tab_/, ''), 1);

            /* disable add button */
            if(Ext.getCmp('tabbar_addbtn')) {
                Ext.getCmp('tabbar_addbtn').setDisabled(This.xdata.locked);
            }

            // refresh icons
            if(TP.initialized) {
                if(delay > 0) {
                    window.setTimeout(Ext.bind(TP.updateAllIcons, This, [This]), delay + 100);
                } else {
                    TP.updateAllIcons(This);
                }
            }
        },
        hide: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) {
                    panlet.hide(false);
                }
            }
        },
        afterrender: function(This, eOpts) {
            if(!this.title) {
                this.applyXdata();
            }
            var header = This.getDockedItems()[0];
            if(header) { header.hide() }
            var tab = This;
            this.el.on("contextmenu", function(e) {
                /* right click context menu on tab body */
                e.preventDefault();
                var pos = [e.getX(), e.getY()];
                Ext.create('Ext.menu.Menu', {
                    margin: '0 0 10 0',
                    items: [{
                        text:   'Refresh',
                        icon:   '[% url_prefix %]plugins/panorama/images/arrow_refresh.png',
                        handler: function() { TP.refreshAllSitePanel(tab) }
                    }
                    [% UNLESS readonly %]
                    , {
                        text:   'New',
                        icon:   '[% url_prefix %]plugins/panorama/images/cog_add.png',
                        hideOnClick: false,
                        menu:    TP.addPanletsMenu({open: 'right'})
                    }, {
                        text:   'Paste',
                        icon:   '[% url_prefix %]plugins/panorama/images/page_paste.png',
                        handler: function() {
                            var tb = Ext.getCmp('tabpan').getActiveTab();
                            if(TP.clipboard.state && TP.clipboard.state.xdata && TP.clipboard.state.xdata.appearance) {
                                // workaround for not existing gradient after copy&paste
                                if(TP.clipboard.state.xdata.appearance.piegradient) {
                                    TP.clipboard.state.xdata.appearance.piegradient = Number(TP.clipboard.state.xdata.appearance.piegradient) + 0.001;
                                }
                                if(TP.clipboard.state.xdata.appearance.shapegradient) {
                                    TP.clipboard.state.xdata.appearance.shapegradient = Number(TP.clipboard.state.xdata.appearance.shapegradient) + 0.001;
                                }
                            }
                            pos[0] = pos[0] - 8;
                            pos[1] = pos[1] - 8;
                            TP.add_panlet_handler(e, e.target, [tb, TP.clone(TP.clipboard), undefined, undefined, pos]);
                        },
                        disabled: (This.locked || TP.clipboard == undefined)
                    }
                    [% END %]
                    ],
                    listeners: {
                        beforehide: function(menu, eOpts) { menu.destroy(); }
                    }
                }).showAt(e.getXY());
            });
        },
        beforerender: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) {
                    panlet.hide();
                }
            }
        }
    },
    getState: function() {
        var state = {
            xdata: this.xdata
        };
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            // REMOVE AFTER: 01.01.2016
            // migrate old settings
            if(state.xdata == undefined) { state.xdata = {} }
            var oldKeys = ['window_ids', 'background', 'title'];
            for(var x=0; x<oldKeys.length; x++) {
                var key = oldKeys[x];
                if(state[key]) {
                    state.xdata[key] = state[key];
                    delete this[key];
                    delete state[key];
                }
            }
            // migrate some global settings
            var global = Ext.getCmp('tabpan');
            var oldGlobals = ['refresh', 'backends', 'autohideheader'];
            for(var x=0; x<oldGlobals.length; x++) {
                var key = oldGlobals[x];
                if(global.xdata[key] != undefined) {
                    state.xdata[key] = global.xdata[key];
                }
            }

            // REMOVE AFTER: 01.01.2016
            if(state.xdata.window_ids) {
                this.window_ids = state.xdata.window_ids;
            }

            // create panlets
            for(var nr=0; nr<this.window_ids.length; nr++) {
                // delayed panlet creation
                var autoshow = false;
                var delay    = TP.initial_create_delay_inactive;
                if(TP.initial_active_tab != undefined && this.id == TP.initial_active_tab) {
                    autoshow = true;
                    delay    = TP.initial_create_delay_active;
                }
                var tabpan    = Ext.getCmp('tabpan');
                var activeTab = tabpan.getActiveTab();
                TP.timeouts['timeout_' + this.window_ids[nr] + '_render'] = window.setTimeout(Ext.bind(TP.add_panlet, this, [{id:this.window_ids[nr], skip_state:true, tb:this, autoshow:autoshow}, false]), delay);

                if(autoshow) {
                   TP.initial_create_delay_active   = TP.initial_create_delay_active   + 50;
                } else {
                   TP.initial_create_delay_inactive = TP.initial_create_delay_inactive + 30;
                }
            };
            Ext.apply(this.xdata, state.xdata);
            if(TP.initMask && this.keepMask) {
                TP.timeouts['timeout_'+this.id+'_remove_mask'] = window.setTimeout(function() {
                    if(TP.initMask) { TP.initMask.destroy(); delete TP.initMask; delete this.keepMask; }
                } ,TP.initial_create_delay_active);
            }
        }
        this.applyXdata();
    },
    applyXdata: function(xdata, startTimeouts) {
        if(xdata == undefined) {
            xdata = this.xdata;
        }
        if(this.readonly == 1) {
            xdata.locked = true;
        }
        this.setLock(xdata.locked);
        this.setTitle(xdata.title);
        this.setBackground(xdata.background);
        if(TP.initialized && startTimeouts != false) {
            this.startTimeouts();
        }
    },

    /* start all timed actions for this tab and its panels */
    startTimeouts: function() {
        this.stopTimeouts();

        var tabpan    = Ext.getCmp('tabpan');
        var activeTab = tabpan.getActiveTab();

        /* ensure panels from the active tab are displayed */
        if(activeTab && this.id == activeTab.id) {
            if(this.window_ids) {
                for(var nr=0; nr<this.window_ids.length; nr++) {
                    var panlet = Ext.getCmp(this.window_ids[nr]);
                    if(panlet) { // may not yet exists due to delayed rendering
                        try {    // so allow it to fail
                            panlet.show(false);
                        } catch(e) { debug(e) }
                    }
                }
            }
        }

        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        if(panels.length > 0) {
            // spread panel reload
            var delay    = 0;
            var interval = 60 / panels.length;
            for(var nr=0; nr<panels.length; nr++) {
                var p = panels[nr];
                if(p.startTimeouts) {
                    window.clearTimeout(TP.timeouts['timeout_' + p.id + '_delayed_start']);
                    TP.timeouts['timeout_' + p.id + '_delayed_start'] = window.setTimeout(Ext.bind(p.startTimeouts, p, []), delay);
                    delay = delay + Math.round(interval*1000);
                }
                if(p.header) {
                    if(this.xdata.autohideheader) { p.header.hide() } else { p.header.show() }
                }
            }
        }
        var This = this;
        if(activeTab && activeTab.xdata && activeTab.xdata.refresh > 0) {
            TP.timeouts['interval_global_icons' + This.id + '_refresh'] = window.setInterval(function() { TP.updateAllIcons(This) }, activeTab.xdata.refresh * 1000);
        }

        TP.updateAllIcons(This);

        if(TP.initMask && !this.keepMask) { TP.initMask.destroy(); delete TP.initMask; }

        if(TP.dashboardsSettingWindow) {
            TP.dashboardsSettingWindow.body.unmask();
            TP.dashboardsSettingWindow.toFront();
        }
    },

    /* stop all timed actions for this tab and its panels */
    stopTimeouts: function() {
        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        for(var nr=0; nr<panels.length; nr++) {
            if(panels[nr].stopTimeouts) {
                panels[nr].stopTimeouts();
            }
        }

        window.clearInterval(TP.timeouts['interval_global_icons' + this.id + '_refresh']);
    },
    setBackground: function(background) {
        if(background != undefined && background != 'none') {
            this.setBodyStyle("background:url('"+background+"');");
            this.setBodyStyle("background-repeat:no-repeat;");
        } else {
            this.setBodyStyle("background:#ffffff");
        }
    },
    /* enable or disable locking for this tab and all panlet below */
    setLock: function(val) {
        var tab = this;
        tab.xdata.locked = val;

        /* disable add button */
        if(Ext.getCmp('tabbar_addbtn')) {
            Ext.getCmp('tabbar_addbtn').setDisabled(val);
        }

        /* apply to all widgets and panels */
        var panels = TP.getAllPanel(this);
        for(var nr=0; nr<panels.length; nr++) {
            panels[nr].setLock(val);
        }
    }
});
