[% USE date %]
Ext.define('TP.TabBar', {
    extend: 'Ext.tab.Panel',
    plugins: [
        new Ext.ux.TabReorderer({
            itemSelector: '.x-tab-closable', // only make real tabs draggable, not the menus
            animate:       0,                // causes flickering server_time otherwise
            listeners: {
                Drop: function(This, container, dragCmp, idx, eOpts) {
                    tabpan = Ext.getCmp('tabpan');
                    tabpan.saveState();
                }
            }
        })
    ],

    id:             'tabpan',
    region:         'center',
    minTabWidth:    80,
    deferredRender: false,
    stateful:       true,
    tabBar:{
        items:[{ xtype: 'tbfill' },{
            id:       'debug_tab',
            closable: false,
            minWidth: 38,
            html:     'Debug',
            iconCls:  'debug-tab',
            tooltip:  'Debug Information',
            handler:  thruk_debug_window_handler,
            margin:   '0 15 0 0'
        }, {
            xtype:    'label',
            text:     '[% date_format(c, date.now, "%H:%M") %]',
            id:       'server_time',
            tooltip:  'server time',
            style:    'margin-top: 3px',
            width:    35,
            height:   16
        }, {
            id:       'bug_report',
            closable:  false,
            minWidth:  28,
            iconCls:  'bug-tab',
            href:     '#',
            html:     'Report',
            tooltip:  'Send Bug Report'
        }, {
            iconCls:  'user-tab',
            closable:  false,
            tooltip:  'user menu',
            arrowCls: 'arrow x-btn-arrow-right x-btn-arrow',
            html:     '[% remote_user %]&nbsp;&nbsp;&nbsp;',
            menu: {
                items: [{
                        text: 'About',
                        icon: '[% url_prefix %]plugins/panorama/images/information.png',
                        handler: function() { TP.aboutWindow() }
                    },
                    [%+ UNLESS readonly +%]
                    {
                        text: 'Settings',
                        icon: '[% url_prefix %]plugins/panorama/images/cog.png',
                        handler: function() { TP.tabSettingsWindow() }
                    }, {
                        text: 'Dashboard Managment',
                        icon: '[% url_prefix %]plugins/panorama/images/new_tab.gif',
                        handler: function() { TP.dashboardsWindow() }
                    },
                    [%+ END +%]
                    /* Exit */
                    '-',
                    [% IF cookie_auth %]
                    {
                        text:   'Logout',
                        icon:   '[% url_prefix %]plugins/panorama/images/door_in.png',
                        handler: function() {
                            window.location = 'login.cgi?logout';
                        }
                    },
                    [% END %]
                    {
                        text:   'Exit Panorama View',
                        icon:   '[% url_prefix %]plugins/panorama/images/exit.png',
                        handler: function() {
                            window.location = '../';
                        }
                    }
                ]
            }
        }
        [% UNLESS readonly %]
        , {
            title:    'add new panel and widgets',
            closable: false,
            minWidth: 70,
            id:       'tabbar_addbtn',
            iconCls:  'gear-tab',
            tooltip:  'add panlets',
            arrowCls: 'arrow x-btn-arrow-right x-btn-arrow',
            html:     'add&nbsp;&nbsp;',
            menu:      TP.addPanletsMenu({open: 'left'})
        }
        [% END %]
        ]
    },
    initComponent: function() {
        this.callParent();

        /* global default setttings */
        this.xdata = {
            rotate_tabs:     0,
            server_time:    true,
            sounds_enabled: false
        }

        /* create new tab */
        var tabhead = this.getTabBar().items.getAt(0);
        tabhead.addListener('click', function(This, eOpts) {
            var menu = Ext.create('Ext.menu.Menu', {
                margin: '0 0 10 0',
                items: [{
                    text:   'New Dashboard',
                    icon:   '[% url_prefix %]plugins/panorama/images/add.png',
                    handler: function() { TP.add_pantab() }
                }, {
                    text:   'Dashboard Managment',
                    icon:   '[% url_prefix %]plugins/panorama/images/new_tab.gif',
                    handler: function() { TP.dashboardsWindow() }
                }, '-', {
                    text: 'My Dashboards',
                    icon: '[% url_prefix %]plugins/panorama/images/user_suit.png',
                    hideOnClick: false,
                    menu: [{
                        text:    'Loading...',
                        icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                        disabled: true
                    }]
                }, {
                    text: 'Public Dashboards',
                    icon: '[% url_prefix %]plugins/panorama/images/world.png',
                    hideOnClick: false,
                    menu: [{
                        text:    'Loading...',
                        icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                        disabled: true
                    }]
                }],
                listeners: {
                    beforehide: function(menu, eOpts) { menu.destroy(); }
                }
            }).showBy(This);
            TP.load_dashboard_menu_items(menu.items.get(3).menu, 'panorama.cgi?task=dashboard_list&list=my', TP.add_pantab, false);
            TP.load_dashboard_menu_items(menu.items.get(4).menu, 'panorama.cgi?task=dashboard_list&list=public', TP.add_pantab, false);
        });

        this.addListener('afterrender', function(This, eOpts) {
            var open_tabs = [];
            this.items.each(function(item, idx, length) {
                var stateId = item.getStateId();
                if(stateId) {
                    open_tabs.push(stateId);
                }
            });
            if(open_tabs.length == 0 && default_dashboard && default_dashboard.length > 0) {
                debug("using default view");
                TP.initial_active_tab = default_dashboard[0];
                TP.initial_active_tab = String(TP.initial_active_tab).replace(/^tabpan-tab_/, '');
                TP.initial_active_tab = "tabpan-tab_"+TP.initial_active_tab;
                for(var x = 0; x<default_dashboard.length; x++) {
                    TP.add_pantab(default_dashboard[x], undefined, x == 0 ? false : true);
                }
            } else if(open_tabs.length == 0) {
                TP.add_pantab();
            }
            TP.startServerTime();
        });
        if(!ExtState[this.id]) {
            TP.initialized = true;
            if(TP.initMask) { TP.initMask.destroy(); delete TP.initMask; }
        }
    },
    getState: function() {
        var open_tabs = [];
        this.items.each(function(item, idx, length) {
            var stateId = item.getStateId();
            if(stateId) {
                open_tabs.push(stateId);
            }
        });
        if(this.tabs_tr == undefined) {
            this.tabs_tr = {};
        }
        var tabs = Ext.query('.x-tab-closable');
        for(var nr=0; nr<tabs.length; nr++) {
            if(this.tabs_tr[tabs[nr].id] == undefined) {
                this.tabs_tr[tabs[nr].id] = open_tabs[nr];
            }
        }
        var ordered_items = [];
        for(var nr=0; nr<tabs.length; nr++) {
            ordered_items.push(this.tabs_tr[tabs[nr].id]);
        }
        if(open_tabs.length == ordered_items.length) {
            open_tabs = ordered_items;
        }
        var activeTab = this.getActiveTab();
        if(!activeTab) {
            debug("forced setting activeTab");
            activeTab = this.setActiveTab(0);
        }
        activeTab = activeTab.getStateId();
        this.open_tabs = open_tabs;

        return {
            open_tabs:  open_tabs,
            xdata:      this.xdata,
            activeTab:  activeTab
        }
    },
    applyState: function(state) {
        var tmp = Ext.dom.Query.select('.x-mask');
        if(tmp.length > 0) {
            // make sure our mask covers new windows...
            Ext.dom.Query.select('.x-mask')[0].style.zIndex         = 100000;
            Ext.dom.Query.select('.x-mask-loading')[0].style.zIndex = 100001;
        }
        try {
            TP.initial_create_delay_active   = 0;    // initial delay of placing panlets (will be incremented in pantabs applyState)
            TP.initial_create_delay_inactive = 1000; // placement of inactive panlet starts delayed
            if(state) {
                if(TP.initial_active_tab == undefined && get_hash(1)) {
                    TP.initial_active_tab = "tabpan-tab_"+get_hash(1);
                }
                if(state.activeTab && TP.initial_active_tab == undefined) {
                    TP.initial_active_tab = state.activeTab;
                }
                this.xdata = state.xdata;

                // REMOVE AFTER: 01.01.2016
                if(state.item_ids) {
                    for(var nr=0; nr<state.item_ids.length; nr++) {
                        TP.add_pantab(state.item_ids[nr]);
                    };
                }

                if(state.open_tabs) {
                    for(var nr=0; nr<state.open_tabs.length; nr++) {
                        var name = state.open_tabs[nr];
                        TP.add_pantab(state.open_tabs[nr]);
                    };
                }

                /* open tab from url */
                if(!Ext.getCmp(TP.initial_active_tab)) {
                    TP.add_pantab(TP.initial_active_tab);
                    state.activeTab = TP.initial_active_tab;
                }

                this.setActiveTab(state.activeTab);
                Ext.apply(this, state);
            }
            TP.timeouts['timeout_'+this.id+'_delayed_start'] = window.setTimeout(Ext.bind(this.startTimeouts, this, []), TP.initial_create_delay_active);
        } catch(e) {
            debug(e);
            if(confirm("Errors while loading your saved settings:\n\n"+e+"\n\nStart over with a clean view?\nAll panorama view settings will be deleted.")) {
                window.location = 'panorama.cgi?clean=1';
            }
        }
        if(TP.initMask) {
            TP.timeouts['timeout_'+this.id+'_remove_mask'] = window.setTimeout(function() {
                if(TP.initMask) { TP.initMask.destroy(); delete TP.initMask; }
            } ,TP.initial_create_delay_active);
        }
    },
    items: [{
        title:   '',
        closable: false,
        iconCls: 'new-tab',
        tabConfig: {
            minWidth: 28,
            maxWidth: 28
        },
        tooltip: 'Add Dashboards',
        listeners: {
            beforeactivate: function() { return false; }
        }
    }],

    /* start all timed actions all tabs all panels */
    startTimeouts: function() {
        TP.initialized = true;
        this.stopTimeouts();

        // REMOVE AFTER: 01.01.2016
        delete this.xdata['refresh'];
        delete this.xdata['autohideheader'];
        delete this.xdata['backends'];
        if(TP.reload_required) {
            Ext.Msg.alert("Reload Required", "Internal storage format has changed. Page will reload automatically with the new format...").toFront();
            TP.timeouts['timeout_'+this.id+'_window_reload'] = window.setTimeout(function() { cp.saveChanges(false); window.location = 'panorama.cgi'; }, 3000);
            return;
        }

        var activeTab = this.getActiveTab();
        if(!activeTab) {
            activeTab = this.setActiveTab(0);
        }

        TP.startRotatingTabs();
        TP.startServerTime();
        this.items.each(function(tab) {
            if(tab.startTimeouts) {
                tab.startTimeouts();
            }
        });

    },

    /* stop all timed actions all tabs all panels */
    stopTimeouts: function() {
        TP.stopRotatingTabs();
        TP.stopServerTime();
        this.items.each(function(tab) {
            if(tab.stopTimeouts) {
                tab.stopTimeouts();
            }
        });
    }
});


TP.load_dashboard_menu_items = function(menu, url, handler, all) {
    Ext.Ajax.request({
        url:      url,
        method:  'POST',
        callback: function(options, success, response) {
            if(!success) {
                if(response.status == 0) {
                    TP.Msg.msg("fail_message~~adding new dashboard failed");
                } else {
                    TP.Msg.msg("fail_message~~adding new dashboard failed: "+response.status+' - '+response.statusText);
                }
            } else {
                var data = TP.getResponse(undefined, response);
                data = data.data;
                menu.removeAll();
                var found = 0;
                for(var x=0; x<data.length; x++) {
                    if(all || !Ext.getCmp(data[x].id)) {
                        found++;
                        menu.add({text:    data[x].name,
                                  val:     data[x].id,
                                  icon:   '[% url_prefix %]plugins/panorama/images/table_go.png',
                                  handler: function() { handler(this.val); }
                                }
                        );
                    }
                }
                if(found == 0) {
                    menu.add({text: 'none', disabled: true});
                }
            }
        }
    });
}
