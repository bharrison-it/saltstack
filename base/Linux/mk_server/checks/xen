#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
xen_mem_default_levels = (80, 90)
def inventory_xen_mem(info):
    return [(None, 'xen_mem_default_levels')]

def check_xen_mem(item, params, info):
    warn = 80
    crit = 90
    for line in info:
        if 'free_memory' in line:
            free_mem = int(line[-1]) / 1000
        if 'total_memory' in line:
            total_mem = int(line[-1]) / 1000
    used_mem = total_mem -free_mem
    percent = float(used_mem / total_mem * 100)
    if percent > crit:
        state = 2
        state_txt = "CRIT - {0:.2f} % used, ({1}/{2} GB), (levels at {3}/{4} %)".format(percent, used_mem, total_mem, warn, crit)
    elif percent > warn and percent < crit:
        state = 1
        state_txt = "WARN - {0} % used, ({1}/{2} GB), (levels at {3}/{4} %)".format(percent, used_mem, total_mem, warn, crit)
    else:
        state = 0
        state_txt = "OK - {0} % used, ({1}/{2} GB), (levels at {3}/{4} %)".format(percent, used_mem, total_mem, warn, crit)
    return (state, state_txt)

check_info['xen.mem'] = {
    "check_function"          : check_xen_mem,
    "inventory_function"      : inventory_xen_mem,
    "service_description"     : "Xen Memory used",
    "has_perfdata"            : True,
    "default_levels_variable" : "xen_mem_default_levels",
}

#############################################################################
# XenServer License Expiry Check
# xe host-license-view output:
# version: 6.0.2 
# serialnumber:
# productcode:
# expiry: 20141213T00:00:00Z
# grace: no  
# name:
# company: 
#############################################################################

def inventory_xen_license(info):
    return [(None, 'xen_license_default_levels')]

def check_xen_license(item, params, info):
    import time
    from datetime import date
    warn = 30
    crit = 10
    expire = ''
    for line in info:
      if 'expiry:' in line:
        expires = time.strptime(line[-1][0:8], "%Y%m%d")[0:3]
        expires_on = date(int(expires[0]), int(expires[1]), int(expires[2]))
        expire_days = (expires_on - date.today()).days

    if expire_days < crit:
        state = 2
        state_txt = "CRIT - {0} days left".format(expire_days)
    elif expire_days > crit and expire_days < warn:
        state = 1
        state_txt = "WARN - {0} days left".format(expire_days)
    else:
        state = 0
        state_txt = "OK - {0} days left".format(expire_days)
        
    return (state, state_txt)

check_info['xen.license'] = {
    "check_function"          : check_xen_license,
    "inventory_function"      : inventory_xen_license,
    "service_description"     : "Xen license",
    "has_perfdata"            : False,
    "default_levels_variable" : "xen_license_default_levels",
}

#################################################
# XenServer Patches Check
#################################################
xs_patches = []
def inventory_xen_patches(info):
    inventory = []
    for line in info:
        if line[0].strip(':') == 'patches':
            p_installed = line[:-1]
    return [(None, xs_patches)]

def check_xen_patches(item, params, info):
    for line in info:
        if line[0].strip(':') == 'patches':
            p_installed = line[1:]
            for p in p_installed:
                xs_patches.remove(p)
                
    if len(xs_patches) != 0:
         state = 1
         state_txt = 'WARN - patches lost: %s' % (','.join(xs_patches))
    else:
         state = 0
         state_txt = 'OK - all patches installed'

    return (state, state_txt)

check_info['xen.patches'] = {
    "check_function"          : check_xen_patches,
    "inventory_function"      : inventory_xen_patches,
    "service_description"     : "Xen patches",
    "has_perfdata"            : False,
}

