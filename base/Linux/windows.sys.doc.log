aliases.get_target:

    Return the target associated with an alias

    CLI Example:

        salt '*' aliases.get_target alias
    

aliases.has_target:

    Return true if the alias/target is set

    CLI Example:

        salt '*' aliases.has_target alias target
    

aliases.list_aliases:

    Return the aliases found in the aliases file in this format::

        {'alias': 'target'}

    CLI Example:

        salt '*' aliases.list_aliases
    

aliases.rm_alias:

    Remove an entry from the aliases file

    CLI Example:

        salt '*' aliases.rm_alias alias
    

aliases.set_target:

    Set the entry in the aliases file for the given alias, this will overwrite
    any previous entry for the given alias or create a new one if it does not
    exist.

    CLI Example:

        salt '*' aliases.set_target alias target
    

archive.gunzip:

    Uses the gunzip command to unpack gzip files

    CLI Example to create ``/tmp/sourcefile.txt``:

        salt '*' archive.gunzip /tmp/sourcefile.txt.gz

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    CLI Example:

        salt '*' archive.gunzip template=jinja /tmp/{{grains.id}}.txt.gz

    

archive.gzip:

    Uses the gzip command to create gzip files

    CLI Example to create ``/tmp/sourcefile.txt.gz``:

        salt '*' archive.gzip /tmp/sourcefile.txt

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    CLI Example:

        salt '*' archive.gzip template=jinja /tmp/{{grains.id}}.txt

    

archive.rar:

    Uses the rar command to create rar files
    Uses rar for Linux from http://www.rarlab.com/

    CLI Example:

        salt '*' archive.rar /tmp/rarfile.rar /tmp/sourcefile1,/tmp/sourcefile2

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    For example:

        salt '*' archive.rar template=jinja /tmp/rarfile.rar /tmp/sourcefile1,/tmp/{{grains.id}}.txt


    

archive.tar:

    Note:

        This function has changed for version 0.17.0. In prior versions, the
        ``cwd`` and ``template`` arguments must be specified, with the source
        directories/files coming as a space-separated list at the end of the
        command. Beginning with 0.17.0, ``sources`` must be a comma-separated
        list, and the ``cwd`` and ``template`` arguments are optional.

    Uses the tar command to pack, unpack, etc tar files


    options:
        Options to pass to the ``tar`` binary.

    tarfile:
        The tar filename to pack/unpack.

    sources:
        Comma delimited list of files to **pack** into the tarfile.

    dest:
        The destination directory to **unpack** the tarfile to.

    cwd:
        The directory in which the tar command should be executed.

    template:
         Template engine name to render the command arguments before execution.

    CLI Example:

        salt '*' archive.tar cjvf /tmp/tarfile.tar.bz2 /tmp/file_1,/tmp/file_2


    The template arg can be set to ``jinja`` or another supported template
    engine to render the command arguments before execution. For example:

        salt '*' archive.tar template=jinja cjvf /tmp/salt.tar.bz2 {{grains.saltpath}}


    To unpack a tarfile, for example:

    ..code-block:: bash

        salt '*' archive.tar foo.tar xf dest=/target/directory

    

archive.unrar:

    Uses the unrar command to unpack rar files
    Uses rar for Linux from http://www.rarlab.com/

    CLI Example:

        salt '*' archive.unrar /tmp/rarfile.rar /home/strongbad/ excludes=file_1,file_2

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    For example:

        salt '*' archive.unrar template=jinja /tmp/rarfile.rar /tmp/{{grains.id}}/ excludes=file_1,file_2

    

archive.unzip:

    Uses the unzip command to unpack zip files

    CLI Example:

        salt '*' archive.unzip /tmp/zipfile.zip /home/strongbad/ excludes=file_1,file_2

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    For example:

        salt '*' archive.unzip template=jinja /tmp/zipfile.zip /tmp/{{grains.id}}/ excludes=file_1,file_2

    

archive.zip:

    Uses the zip command to create zip files

    CLI Example:

        salt '*' archive.zip /tmp/zipfile.zip /tmp/sourcefile1,/tmp/sourcefile2

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.

    For example:

        salt '*' archive.zip template=jinja /tmp/zipfile.zip /tmp/sourcefile1,/tmp/{{grains.id}}.txt

    

autoruns.list:

    Get a list of automatically running programs

    CLI Example:

        salt '*' autoruns.list
    

cmd.exec_code:

    Pass in two strings, the first naming the executable language, aka -
    python2, python3, ruby, perl, lua, etc. the second string containing
    the code you wish to execute. The stdout and stderr will be returned

    CLI Example:

        salt '*' cmd.exec_code ruby 'puts "cheese"'
    

cmd.has_exec:

    Returns true if the executable is available on the minion, false otherwise

    CLI Example:

        salt '*' cmd.has_exec cat
    

cmd.retcode:

    Execute a shell command and return the command's return code.

    Note that ``env`` represents the environment variables for the command, and
    should be formatted as a dict, or a YAML string which resolves to a dict.

    CLI Example:

        salt '*' cmd.retcode "file /bin/bash"

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.
    For example:

        salt '*' cmd.retcode template=jinja "file {{grains.pythonpath[0]}}/python"

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.retcode "grep f" stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.run:

    Execute the passed command and return the output as a string

    Note that ``env`` represents the environment variables for the command, and
    should be formatted as a dict, or a YAML string which resolves to a dict.

    CLI Example:

        salt '*' cmd.run "ls -l | awk '/foo/{print \$2}'"

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.
    For example:

        salt '*' cmd.run template=jinja "ls -l /tmp/{{grains.id}} | awk '/foo/{print \$2}'"

    Specify an alternate shell with the shell parameter:

        salt '*' cmd.run "Get-ChildItem C:\ " shell='powershell'

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.run "grep f" stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.run_all:

    Execute the passed command and return a dict of return data

    Note that ``env`` represents the environment variables for the command, and
    should be formatted as a dict, or a YAML string which resolves to a dict.

    CLI Example:

        salt '*' cmd.run_all "ls -l | awk '/foo/{print \$2}'"

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.
    For example:

        salt '*' cmd.run_all template=jinja "ls -l /tmp/{{grains.id}} | awk '/foo/{print \$2}'"

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.run_all "grep f" stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.run_stderr:

    Execute a command and only return the standard error

    Note that ``env`` represents the environment variables for the command, and
    should be formatted as a dict, or a YAML string which resolves to a dict.

    CLI Example:

        salt '*' cmd.run_stderr "ls -l | awk '/foo/{print \$2}'"

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.
    For example:

        salt '*' cmd.run_stderr template=jinja "ls -l /tmp/{{grains.id}} | awk '/foo/{print \$2}'"

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.run_stderr "grep f" stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.run_stdout:

    Execute a command, and only return the standard out

    Note that ``env`` represents the environment variables for the command, and
    should be formatted as a dict, or a YAML string which resolves to a dict.

    CLI Example:

        salt '*' cmd.run_stdout "ls -l | awk '/foo/{print \$2}'"

    The template arg can be set to 'jinja' or another supported template
    engine to render the command arguments before execution.
    For example:

        salt '*' cmd.run_stdout template=jinja "ls -l /tmp/{{grains.id}} | awk '/foo/{print \$2}'"

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.run_stdout "grep f" stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.script:

    Download a script from a remote location and execute the script locally.
    The script can be located on the salt master file server or on an HTTP/FTP
    server.

    The script will be executed directly, so it can be written in any available
    programming language.

    The script can also be formated as a template, the default is jinja.
    Arguments for the script can be specified as well.

    CLI Example:

        salt '*' cmd.script salt://scripts/runme.sh
        salt '*' cmd.script salt://scripts/runme.sh 'arg1 arg2 "arg 3"'
        salt '*' cmd.script salt://scripts/windows_task.ps1 args=' -Input c:\tmp\infile.txt' shell='powershell'

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.script salt://scripts/runme.sh stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.script_retcode:

    Download a script from a remote location and execute the script locally.
    The script can be located on the salt master file server or on an HTTP/FTP
    server.

    The script will be executed directly, so it can be written in any available
    programming language.

    The script can also be formated as a template, the default is jinja.

    Only evaluate the script return code and do not block for terminal output

    CLI Example:

        salt '*' cmd.script_retcode salt://scripts/runme.sh

    A string of standard input can be specified for the command to be run using
    the ``stdin`` parameter. This can be useful in cases where sensitive
    information must be read from standard input.:

        salt '*' cmd.script_retcode salt://scripts/runme.sh stdin='one\ntwo\nthree\nfour\nfive\n'
    

cmd.which:

    Returns the path of an executable available on the minion, None otherwise

    CLI Example:

        salt '*' cmd.which cat
    

cmd.which_bin:

    Returns the first command found in a list of commands

    CLI Example:

        salt '*' cmd.which_bin '[pip2, pip, pip-python]'
    

config.backup_mode:

    Return the backup mode

    CLI Example:

        salt '*' config.backup_mode
    

config.dot_vals:

    Pass in a configuration value that should be preceded by the module name
    and a dot, this will return a list of all read key/value pairs

    CLI Example:

        salt '*' config.dot_vals host
    

config.gather_bootstrap_script:

    Download the salt-bootstrap script, set replace to True to refresh the
    script if it has already been downloaded

    CLI Example:

        salt '*' config.gather_bootstrap_script True
    

config.get:

    .. versionadded: 0.14

    Attempt to retrieve the named value from opts, pillar, grains of the master
    config, if the named value is not available return the passed default.
    The default return is an empty string.

    The value can also represent a value in a nested dict using a ":" delimiter
    for the dict. This means that if a dict looks like this::

        {'pkg': {'apache': 'httpd'}}

    To retrieve the value associated with the apache key in the pkg dict this
    key can be passed::

        pkg:apache

    This routine traverses these data stores in this order:

    - Local minion config (opts)
    - Minion's grains
    - Minion's pillar
    - Master config

    CLI Example:

        salt '*' config.get pkg:apache
    

config.manage_mode:

    Return a mode value, normalized to a string

    CLI Example:

        salt '*' config.manage_mode
    

config.merge:

    Retrieves an option based on key, merging all matches.

    Same as ``option()`` except that it merges all matches, rather than taking
    the first match.

    CLI Example:

        salt '*' config.merge schedule
    

config.option:

    Pass in a generic option and receive the value that will be assigned

    CLI Example:

        salt '*' config.option redis.host
    

config.valid_fileproto:

    Returns a boolean value based on whether or not the URI passed has a valid
    remote file protocol designation

    CLI Example:

        salt '*' config.valid_fileproto salt://path/to/file
    

cp.cache_dir:

    Download and cache everything under a directory from the master

    CLI Example:

        salt '*' cp.cache_dir salt://path/to/dir
    

cp.cache_file:

    Used to cache a single file in the local salt-master file cache.

    CLI Example:

        salt '*' cp.cache_file salt://path/to/file
    

cp.cache_files:

    Used to gather many files from the master, the gathered files will be
    saved in the minion cachedir reflective to the paths retrieved from the
    master.

    CLI Example:

        salt '*' cp.cache_files salt://pathto/file1,salt://pathto/file1
    

cp.cache_local_file:

    Cache a local file on the minion in the localfiles cache

    CLI Example:

        salt '*' cp.cache_local_file /etc/hosts
    

cp.cache_master:

    Retrieve all of the files on the master and cache them locally

    CLI Example:

        salt '*' cp.cache_master
    

cp.get_dir:

    Used to recursively copy a directory from the salt master

    CLI Example:

        salt '*' cp.get_dir salt://path/to/dir/ /minion/dest

    get_dir supports the same template and gzip arguments as get_file.
    

cp.get_file:

    Used to get a single file from the salt master

    CLI Example:

        salt '*' cp.get_file salt://path/to/file /minion/dest

    Template rendering can be enabled on both the source and destination file
    names like so:

        salt '*' cp.get_file "salt://{{grains.os}}/vimrc" /etc/vimrc template=jinja

    This example would instruct all Salt minions to download the vimrc from a
    directory with the same name as their os grain and copy it to /etc/vimrc

    For larger files, the cp.get_file module also supports gzip compression.
    Because gzip is CPU-intensive, this should only be used in scenarios where
    the compression ratio is very high (e.g. pretty-printed JSON or YAML
    files).

    Use the *gzip* named argument to enable it.  Valid values are 1..9, where 1
    is the lightest compression and 9 the heaviest.  1 uses the least CPU on
    the master (and minion), 9 uses the most.
    

cp.get_file_str:

    Return the contents of a file from a URL

    CLI Example:

        salt '*' cp.get_file_str salt://my/file
    

cp.get_template:

    Render a file as a template before setting it down

    CLI Example:

        salt '*' cp.get_template salt://path/to/template /minion/dest
    

cp.get_url:

    Used to get a single file from a URL.

    CLI Example:

        salt '*' cp.get_url salt://my/file /tmp/mine
        salt '*' cp.get_url http://www.slashdot.org /tmp/index.html
    

cp.hash_file:

    Return the hash of a file, to get the hash of a file on the
    salt master file server prepend the path with salt://<file on server>
    otherwise, prepend the file with / for a local file.

    CLI Example:

        salt '*' cp.hash_file salt://path/to/file
    

cp.is_cached:

    Return a boolean if the given path on the master has been cached on the
    minion

    CLI Example:

        salt '*' cp.is_cached salt://path/to/file
    

cp.list_master:

    List all of the files stored on the master

    CLI Example:

        salt '*' cp.list_master
    

cp.list_master_dirs:

    List all of the directories stored on the master

    CLI Example:

        salt '*' cp.list_master_dirs
    

cp.list_minion:

    List all of the files cached on the minion

    CLI Example:

        salt '*' cp.list_minion
    

cp.list_states:

    List all of the available state modules in an environment

    CLI Example:

        salt '*' cp.list_states
    

cp.push:

    Push a file from the minion up to the master, the file will be saved to
    the salt master in the master's minion files cachedir
    (defaults to ``/var/cache/salt/master/minions/minion-id/files``)

    Since this feature allows a minion to push a file up to the master server
    it is disabled by default for security purposes. To enable, set
    ``file_recv`` to ``True`` in the master configuration file, and restart the
    master.

    CLI Example:

        salt '*' cp.push /etc/fstab
    

cp.recv:

    Used with salt-cp, pass the files dict, and the destination.

    This function receives small fast copy files from the master via salt-cp.
    It does not work via the CLI.
    

cron.list_tab:

    Return the contents of the specified user's crontab

    CLI Example:

        salt '*' cron.list_tab root
    

cron.ls:

    Return the contents of the specified user's crontab

    CLI Example:

        salt '*' cron.list_tab root
    

cron.raw_cron:

    Return the contents of the user's crontab

    CLI Example:

        salt '*' cron.raw_cron root
    

cron.rm:

    Remove a cron job for a specified user. If any of the day/time params are
    specified, the job will only be removed if the specified params match.

    CLI Example:

        salt '*' cron.rm_job root /usr/local/weekly
        salt '*' cron.rm_job root /usr/bin/foo dayweek=1
    

cron.rm_env:

    Remove cron environment variable for a specified user.

    CLI Example:

        salt '*' cron.rm_env root MAILTO
    

cron.rm_job:

    Remove a cron job for a specified user. If any of the day/time params are
    specified, the job will only be removed if the specified params match.

    CLI Example:

        salt '*' cron.rm_job root /usr/local/weekly
        salt '*' cron.rm_job root /usr/bin/foo dayweek=1
    

cron.set_env:

    Set up an environment variable in the crontab.

    CLI Example:

        salt '*' cron.set_env root MAILTO user@example.com
    

cron.set_job:

    Sets a cron job up for a specified user.

    CLI Example:

        salt '*' cron.set_job root '*' '*' '*' '*' 1 /usr/local/weekly
    

cron.set_special:

    Set up a special command in the crontab.

    CLI Example:

        salt '*' cron.set_special @hourly 'echo foobar'
    

cron.write_cron_file:

    Writes the contents of a file to a user's crontab

    CLI Example:

        salt '*' cron.write_cron_file root /tmp/new_cron
    

cron.write_cron_file_verbose:

    Writes the contents of a file to a user's crontab and return error message on error

    CLI Example:

        salt '*' cron.write_cron_file_verbose root /tmp/new_cron
    

daemontools.available:

    Returns ``True`` if the specified service is available, otherwise returns
    ``False``.

    CLI Example:

        salt '*' daemontools.available foo
    

daemontools.full_restart:

    Calls daemontools.restart() function

    CLI Example:

        salt '*' daemontools.full_restart <service name>
    

daemontools.get_all:

    Return a list of all available services

    CLI Example:

        salt '*' daemontools.get_all
    

daemontools.reload:

    Wrapper for term()

    CLI Example:

        salt '*' daemontools.reload <service name>
    

daemontools.restart:

    Restart service via daemontools. This will stop/start service

    CLI Example:

        salt '*' daemontools.restart <service name>
    

daemontools.start:

    Starts service via daemontools

    CLI Example:

        salt '*' daemontools.start <service name>
    

daemontools.status:

    Return the status for a service via daemontools, return pid if running

    CLI Example:

        salt '*' daemontools.status <service name>
    

daemontools.stop:

    Stops service via daemontools

    CLI Example:

        salt '*' daemontools.stop <service name>
    

daemontools.term:

    Send a TERM to service via daemontools

    CLI Example:

        salt '*' daemontools.term <service name>
    

data.cas:

    Check and set a value in the minion datastore

    CLI Example:

        salt '*' data.cas <key> <value> <old_value>
    

data.clear:

    Clear out all of the data in the minion datastore, this function is
    destructive!

    CLI Example:

        salt '*' data.clear
    

data.dump:

    Replace the entire datastore with a passed data structure

    CLI Example:

        salt '*' data.dump '{'eggs': 'spam'}'
    

data.getval:

    Get a value from the minion datastore

    CLI Example:

        salt '*' data.getval <key>
    

data.getvals:

    Get values from the minion datastore

    CLI Example:

        salt '*' data.getvals <key> [<key> ...]
    

data.load:

    Return all of the data in the minion datastore

    CLI Example:

        salt '*' data.load
    

data.update:

    Update a key with a value in the minion datastore

    CLI Example:

        salt '*' data.update <key> <value>
    

disk.usage:

    Return usage information for volumes mounted on this minion

    CLI Example:

        salt '*' disk.usage
    

django.collectstatic:

    Collect static files from each of your applications into a single location
    that can easily be served in production.

    CLI Example:

        salt '*' django.collectstatic <settings_module>
    

django.command:

    Run arbitrary django management command

    CLI Example:

        salt '*' django.command <settings_module> <command>
    

django.createsuperuser:

    Create a super user for the database.
    This function defaults to use the ``--noinput`` flag which prevents the
    creation of a password for the superuser.

    CLI Example:

        salt '*' django.createsuperuser <settings_module> user user@example.com
    

django.loaddata:

    Load fixture data

    Fixtures:
        comma separated list of fixtures to load

    CLI Example:

        salt '*' django.loaddata <settings_module> <comma delimited list of fixtures>

    

django.syncdb:

    Run syncdb

    Execute the Django-Admin syncdb command, if South is available on the
    minion the ``migrate`` option can be passed as ``True`` calling the
    migrations to run after the syncdb completes

    CLI Example:

        salt '*' django.syncdb <settings_module>
    

dnsutil.A:

    Return the A record for 'host'.

    Always returns a list.

    CLI Example:

        salt ns1 dig.A www.google.com
    

dnsutil.MX:

    Return a list of lists for the MX of ``domain``.

    If the 'resolve' argument is True, resolve IPs for the servers.

    It's limited to one IP, because although in practice it's very rarely a
    round robin, it is an acceptable configuration and pulling just one IP lets
    the data be similar to the non-resolved version. If you think an MX has
    multiple IPs, don't use the resolver here, resolve them in a separate step.

    CLI Example:

        salt ns1 dig.MX google.com
    

dnsutil.NS:

    Return a list of IPs of the nameservers for ``domain``

    If 'resolve' is False, don't resolve names.

    CLI Example:

        salt ns1 dig.NS google.com

    

dnsutil.SPF:

    Return the allowed IPv4 ranges in the SPF record for ``domain``.

    If record is ``SPF`` and the SPF record is empty, the TXT record will be
    searched automatically. If you know the domain uses TXT and not SPF,
    specifying that will save a lookup.

    CLI Example:

        salt ns1 dig.SPF google.com
    

dnsutil.check_ip:

    Check that string ip_addr is a valid IP

    CLI Example:

        salt ns1 dig.check_ip 127.0.0.1
    

dnsutil.hosts_append:

    Append a single line to the /etc/hosts file.

    CLI Example:

        salt '*' dnsutil.hosts_append /etc/hosts 127.0.0.1 ad1.yuk.co,ad2.yuk.co
    

dnsutil.hosts_remove:

    Remove a host from the /etc/hosts file. If doing so will leave a line
    containing only an IP address, then the line will be deleted. This function
    will leave comments and blank lines intact.

    CLI Examples:

        salt '*' dnsutil.hosts_remove /etc/hosts ad1.yuk.co
        salt '*' dnsutil.hosts_remove /etc/hosts ad2.yuk.co,ad1.yuk.co
    

dnsutil.parse_hosts:

    Parse /etc/hosts file.

    CLI Example:

        salt '*' dnsutil.parse_hosts
    

dnsutil.parse_zone:

    Parses a zone file. Can be passed raw zone data on the API level.

    CLI Example:

        salt ns1 dnsutil.parse_zone /var/lib/named/example.com.zone
    

event.fire:

    Fire an event on the local minion event bus. Data must be formed as a dict.

    CLI Example:

        salt '*' event.fire '{"data":"my event data"}' 'tag'
    

event.fire_master:

    Fire an event off up to the master server

    CLI Example:

        salt '*' event.fire_master '{"data":"my event data"}' 'tag'
    

file.append:

    New in version 0.9.5

    Append text to the end of a file

    CLI Example:

        salt '*' file.append /etc/motd \
                "With all thine offerings thou shalt offer salt." \
                "Salt is what makes things taste bad when it isn't in them."
    

file.check_file_meta:

    Check for the changes in the file metadata.

    CLI Example:

        salt '*' file.check_file_meta /etc/httpd/conf.d/httpd.conf salt://http/httpd.conf '{hash_type: 'md5', 'hsum': <md5sum>}' root, root, '755' base
    

file.check_hash:

    Check if a file matches the given hash string

    Returns true if the hash matched, otherwise false. Raises ValueError if
    the hash was not formatted correctly.

    path
        A file path
    hash
        A string in the form <hash_type>=<hash_value>. For example:
        ``md5=e138491e9d5b97023cea823fe17bac22``

    CLI Example:

        salt '*' file.check_hash /etc/fstab md5=<md5sum>
    

file.check_managed:

    Check to see what changes need to be made for a file

    CLI Example:

        salt '*' file.check_managed /etc/httpd/conf.d/httpd.conf salt://http/httpd.conf '{hash_type: 'md5', 'hsum': <md5sum>}' root, root, '755' jinja True None None base
    

file.check_perms:

    Check the permissions on files and chown if needed

    CLI Example:

        salt '*' file.check_perms /etc/sudoers '{}' root root 400
    

file.chgrp:

    Change the group of a file

    CLI Example:

        salt '*' file.chgrp c:\temp\test.txt administrators
    

file.chown:

    Chown a file, pass the file the desired user and group

    CLI Example:

        salt '*' file.chown c:\temp\test.txt myusername administrators
    

file.comment:

    .. deprecated:: 0.17.1
       Use :func:`replace` instead.

    Comment out specified lines in a file

    path
        The full path to the file to be edited
    regex
        A regular expression used to find the lines that are to be commented;
        this pattern will be wrapped in parenthesis and will move any
        preceding/trailing ``^`` or ``$`` characters outside the parenthesis
        (e.g., the pattern ``^foo$`` will be rewritten as ``^(foo)$``)
    char : ``#``
        The character to be inserted at the beginning of a line in order to
        comment it out
    backup : ``.bak``
        The file will be backed up before edit with this file extension

        Warning:

            This backup will be overwritten each time ``sed`` / ``comment`` /
            ``uncomment`` is called. Meaning the backup will only be useful
            after the first invocation.

    CLI Example:

        salt '*' file.comment /etc/modules pcspkr
    

file.contains:

    .. deprecated:: 0.17.1
       Use :func:`search` instead.

    Return ``True`` if the file at ``path`` contains ``text``

    CLI Example:

        salt '*' file.contains /etc/crontab 'mymaintenance.sh'
    

file.contains_glob:

    .. deprecated:: 0.17.1
       Use :func:`search` instead.

    Return True if the given glob matches a string in the named file

    CLI Example:

        salt '*' file.contains_glob /etc/foobar '*cheese*'
    

file.contains_regex:

    .. deprecated:: 0.17.1
       Use :func:`search` instead.

    Return True if the given regular expression matches on any line in the text
    of a given file.

    If the lchar argument (leading char) is specified, it
    will strip `lchar` from the left side of each line before trying to match

    CLI Example:

        salt '*' file.contains_regex /etc/crontab
    

file.contains_regex_multiline:

    .. deprecated:: 0.17.1
       Use :func:`search` instead.

    Return True if the given regular expression matches anything in the text
    of a given file

    Traverses multiple lines at a time, via the salt BufferedReader (reads in
    chunks)

    CLI Example:

        salt '*' file.contains_regex_multiline /etc/crontab '^maint'
    

file.directory_exists:

    Tests to see if path is a valid directory.  Returns True/False.

    CLI Example:

        salt '*' file.directory_exists /etc

    

file.file_exists:

    Tests to see if path is a valid file.  Returns True/False.

    CLI Example:

        salt '*' file.file_exists /etc/passwd

    

file.find:

    Approximate the Unix ``find(1)`` command and return a list of paths that
    meet the specified criteria.

    The options include match criteria::

        name    = path-glob                 # case sensitive
        iname   = path-glob                 # case insensitive
        regex   = path-regex                # case sensitive
        iregex  = path-regex                # case insensitive
        type    = file-types                # match any listed type
        user    = users                     # match any listed user
        group   = groups                    # match any listed group
        size    = [+-]number[size-unit]     # default unit = byte
        mtime   = interval                  # modified since date
        grep    = regex                     # search file contents

    and/or actions::

        delete [= file-types]               # default type = 'f'
        exec    = command [arg ...]         # where {} is replaced by pathname
        print  [= print-opts]

    The default action is 'print=path'.

    file-glob::

        *                = match zero or more chars
        ?                = match any char
        [abc]            = match a, b, or c
        [!abc] or [^abc] = match anything except a, b, and c
        [x-y]            = match chars x through y
        [!x-y] or [^x-y] = match anything except chars x through y
        {a,b,c}          = match a or b or c

    path-regex: a Python re (regular expression) pattern to match pathnames

    file-types: a string of one or more of the following::

        a: all file types
        b: block device
        c: character device
        d: directory
        p: FIFO (named pipe)
        f: plain file
        l: symlink
        s: socket

    users: a space and/or comma separated list of user names and/or uids

    groups: a space and/or comma separated list of group names and/or gids

    size-unit::

        b: bytes
        k: kilobytes
        m: megabytes
        g: gigabytes
        t: terabytes

    interval::

        [<num>w] [<num>d] [<num>h] [<num>m] [<num>s]

        where:
            w: week
            d: day
            h: hour
            m: minute
            s: second

    print-opts: a comma and/or space separated list of one or more of the
    following::

        group: group name
        md5:   MD5 digest of file contents
        mode:  file permissions (as integer)
        mtime: last modification time (as time_t)
        name:  file basename
        path:  file absolute path
        size:  file size in bytes
        type:  file type
        user:  user name

    CLI Examples:

        salt '*' file.find / type=f name=\*.bak size=+10m
        salt '*' file.find /var mtime=+30d size=+10m print=path,size,mtime
        salt '*' file.find /var/log name=\*.[0-9] mtime=+30d size=+10m delete
    

file.get_attributes:

    Return a dictionary object with the Windows
    file attributes for a file.

    CLI Example:

        salt '*' file.get_attributes c:\temp\a.txt
    

file.get_diff:

    Return unified diff of file compared to file on master

    CLI Example:

        salt '*' file.get_diff /home/fred/.vimrc salt://users/fred/.vimrc
    

file.get_gid:

    Return the id of the group that owns a given file

    CLI Example:

        salt '*' file.get_gid c:\temp\test.txt
    

file.get_group:

    Return the group that owns a given file

    CLI Example:

        salt '*' file.get_group c:\temp\test.txt
    

file.get_hash:

    Get the hash sum of a file

    This is better than ``get_sum`` for the following reasons:
        - It does not read the entire file into memory.
        - It does not return a string on error. The returned value of
            ``get_sum`` cannot really be trusted since it is vulnerable to
            collisions: ``get_sum(..., 'xyz') == 'Hash xyz not supported'``

    CLI Example:

        salt '*' file.get_hash /etc/shadow
    

file.get_managed:

    Return the managed file data for file.managed

    CLI Example:

        salt '*' file.get_managed /etc/httpd/conf.d/httpd.conf jinja salt://http/httpd.conf '{hash_type: 'md5', 'hsum': <md5sum>}' root root '755' base None None
    

file.get_mode:

    Return the mode of a file

    Right now we're just returning None
    because Windows' doesn't have a mode
    like Linux

    CLI Example:

        salt '*' file.get_mode /etc/passwd
    

file.get_sum:

    Return the sum for the given file, default is md5, sha1, sha224, sha256,
    sha384, sha512 are supported

    CLI Example:

        salt '*' file.get_sum /etc/passwd sha512
    

file.get_uid:

    Return the id of the user that owns a given file

    CLI Example:

        salt '*' file.get_uid c:\temp\test.txt
    

file.get_user:

    Return the user that owns a given file

    CLI Example:

        salt '*' file.get_user c:\temp\test.txt
    

file.gid_to_group:

    Convert the group id to the group name on this system

    CLI Example:

        salt '*' file.gid_to_group S-1-5-21-626487655-2533044672-482107328-1010
    

file.group_to_gid:

    Convert the group to the gid on this system

    CLI Example:

        salt '*' file.group_to_gid administrators
    

file.makedirs:

    Ensure that the directory containing this path is available.

    CLI Example:

        salt '*' file.makedirs /opt/code
    

file.makedirs_perms:

    Taken and modified from os.makedirs to set user, group and mode for each
    directory created.

    CLI Example:

        salt '*' file.makedirs_perms /opt/code
    

file.manage_file:

    Checks the destination against what was retrieved with get_managed and
    makes the appropriate modifications (if necessary).

    CLI Example:

        salt '*' file.manage_file /etc/httpd/conf.d/httpd.conf '{}' salt://http/httpd.conf '{hash_type: 'md5', 'hsum': <md5sum>}' root root '755' base ''
    

file.mkdir:

    Ensure that a directory is available.

    CLI Example:

        salt '*' file.mkdir /opt/jetty/context
    

file.patch:

    New in version 0.10.4

    Apply a patch to a file

    Equivalent to::

        patch <options> <originalfile> <patchfile>

    originalfile
        The full path to the file or directory to be patched
    patchfile
        A patch file to apply to ``originalfile``
    options
        Options to pass to patch.

    CLI Example:

        salt '*' file.patch /opt/file.txt /tmp/file.txt.patch
    

file.psed:

    .. deprecated:: 0.17.1
       Use :func:`replace` instead.

    Make a simple edit to a file (pure Python version)

    Equivalent to::

        sed <backup> <options> "/<limit>/ s/<before>/<after>/<flags> <file>"

    path
        The full path to the file to be edited
    before
        A pattern to find in order to replace with ``after``
    after
        Text that will replace ``before``
    limit : ``''``
        An initial pattern to search for before searching for ``before``
    backup : ``.bak``
        The file will be backed up before edit with this file extension;
        **WARNING:** each time ``sed``/``comment``/``uncomment`` is called will
        overwrite this backup
    flags : ``gMS``
        Flags to modify the search. Valid values are:
          - ``g``: Replace all occurrences of the pattern, not just the first.
          - ``I``: Ignore case.
          - ``L``: Make ``\w``, ``\W``, ``\b``, ``\B``, ``\s`` and ``\S``
            dependent on the locale.
          - ``M``: Treat multiple lines as a single line.
          - ``S``: Make `.` match all characters, including newlines.
          - ``U``: Make ``\w``, ``\W``, ``\b``, ``\B``, ``\d``, ``\D``,
            ``\s`` and ``\S`` dependent on Unicode.
          - ``X``: Verbose (whitespace is ignored).
    multi: ``False``
        If True, treat the entire file as a single line

    Forward slashes and single quotes will be escaped automatically in the
    ``before`` and ``after`` patterns.

    CLI Example:

        salt '*' file.sed /etc/httpd/httpd.conf 'LogLevel warn' 'LogLevel info'
    

file.remove:

    Remove the named file

    CLI Example:

        salt '*' file.remove /tmp/foo
    

file.sed:

    .. deprecated:: 0.17.1
       Use :func:`replace` instead.

    Make a simple edit to a file

    Equivalent to::

        sed <backup> <options> "/<limit>/ s/<before>/<after>/<flags> <file>"

    path
        The full path to the file to be edited
    before
        A pattern to find in order to replace with ``after``
    after
        Text that will replace ``before``
    limit : ``''``
        An initial pattern to search for before searching for ``before``
    backup : ``.bak``
        The file will be backed up before edit with this file extension;
        **WARNING:** each time ``sed``/``comment``/``uncomment`` is called will
        overwrite this backup
    options : ``-r -e``
        Options to pass to sed
    flags : ``g``
        Flags to modify the sed search; e.g., ``i`` for case-insensitve pattern
        matching
    negate_match : False
        Negate the search command (``!``)

        New in version 0.17

    Forward slashes and single quotes will be escaped automatically in the
    ``before`` and ``after`` patterns.

    CLI Example:

        salt '*' file.sed /etc/httpd/httpd.conf 'LogLevel warn' 'LogLevel info'
    

file.sed_contains:

    .. deprecated:: 0.17.1
       Use :func:`search` instead.

    Return True if the file at ``path`` contains ``text``. Utilizes sed to
    perform the search (line-wise search).

    Note: the ``p`` flag will be added to any flags you pass in.

    CLI Example:

        salt '*' file.contains /etc/crontab 'mymaintenance.sh'
    

file.set_attributes:

    Set file attributes for a file.  Note that the normal attribute
    means that all others are false.  So setting it will clear all others.

    CLI Example:

        salt '*' file.set_attributes c:\temp\a.txt normal=True
        salt '*' file.set_attributes c:\temp\a.txt readonly=True hidden=True
    

file.set_mode:

    Set the mode of a file

    This just calls get_mode, which returns None because we don't use mode on
    Windows

    CLI Example:

        salt '*' file.set_mode /etc/passwd 0644
    

file.source_list:

    Check the source list and return the source to use

    CLI Example:

        salt '*' file.source_list salt://http/httpd.conf '{hash_type: 'md5', 'hsum': <md5sum>}' base
    

file.stats:

    Return a dict containing the stats for a given file

    CLI Example:

        salt '*' file.stats /etc/passwd
    

file.touch:

    New in version 0.9.5

    Just like the ``touch`` command, create a file if it doesn't exist or
    simply update the atime and mtime if it already does.

    atime:
        Access time in Unix epoch time
    mtime:
        Last modification in Unix epoch time

    CLI Example:

        salt '*' file.touch /var/log/emptyfile
    

file.uid_to_user:

    Convert a uid to a user name

    CLI Example:

        salt '*' file.uid_to_user S-1-5-21-626487655-2533044672-482107328-1010
    

file.uncomment:

    .. deprecated:: 0.17.1
       Use :func:`replace` instead.

    Uncomment specified commented lines in a file

    path
        The full path to the file to be edited
    regex
        A regular expression used to find the lines that are to be uncommented.
        This regex should not include the comment character. A leading ``^``
        character will be stripped for convenience (for easily switching
        between comment() and uncomment()).
    char : ``#``
        The character to remove in order to uncomment a line
    backup : ``.bak``
        The file will be backed up before edit with this file extension;
        **WARNING:** each time ``sed``/``comment``/``uncomment`` is called will
        overwrite this backup

    CLI Example:

        salt '*' file.uncomment /etc/hosts.deny 'ALL: PARANOID'
    

file.user_to_uid:

    Convert user name to a uid

    CLI Example:

        salt '*' file.user_to_uid myusername
    

firewall.disable:

    Disable all the firewall profiles

    CLI Example:

        salt '*' firewall.disable
    

firewall.get_config:

    Get the status of all the firewall profiles

    CLI Example:

        salt '*' firewall.get_config
    

gem.install:

    Installs one or several gems.

    gems
        The gems to install
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.
    version : None
        Specify the version to install for the gem.
        Doesn't play nice with multiple gems at once
    rdoc : False
        Generate RDoc documentation for the gem(s).
    ri : False
        Generate RI documentation for the gem(s).

    CLI Example:

        salt '*' gem.install vagrant
    

gem.list:

    List locally installed gems.

    prefix :
        Only list gems when the name matches this prefix.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.list
    

gem.sources_add:

    Add a gem source.

    source_uri
        The source URI to add.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.sources_add http://rubygems.org/
    

gem.sources_list:

    List the configured gem sources.

    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.sources_list
    

gem.sources_remove:

    Remove a gem source.

    source_uri
        The source URI to remove.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.sources_remove http://rubygems.org/
    

gem.uninstall:

    Uninstall one or several gems.

    gems
        The gems to uninstall.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.uninstall vagrant
    

gem.update:

    Update one or several gems.

    gems
        The gems to update.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.update vagrant
    

gem.update_system:

    Update rubygems.

    version : (newest)
        The version of rubygems to install.
    ruby : None
        If RVM is installed, the ruby version and gemset to use.
    runas : None
        The user to run gem as.

    CLI Example:

        salt '*' gem.update_system
    

grains.append:

    New in version 0.17.0

    Append a value to a list in the grains config file

    CLI Example:

        salt '*' grains.append key val
    

grains.delval:

    New in version 0.17.0

    Delete a grain from the grains config file

    :param Destructive: Delete the key, too. Defaults to False.

    CLI Example:

        salt '*' grains.delval key
    

grains.filter_by:

    New in version 0.17.0

    Look up the given grain in a given dictionary for the current OS and return
    the result

    Although this may occasionally be useful at the CLI, the primary intent of
    this function is for use in Jinja to make short work of creating lookup
    tables for OS-specific data. For example:

        {% set apache = salt['grains.filter_by']({
            'Debian': {'pkg': 'apache2', 'srv': 'apache2'},
            'RedHat': {'pkg': 'httpd', 'srv': 'httpd'},
        }) %}

        myapache:
          pkg:
            - installed
            - name: {{ apache.pkg }}
          service:
            - running
            - name: {{ apache.srv }}

    Values in the lookup table may be overridden by values in Pillar. An
    example Pillar to override values in the example above could be as follows:

        apache:
          lookup:
            pkg: apache_13
            srv: apache

    The call to ``filter_by()`` would be modified as follows to reference those
    Pillar values:

        {% set apache = salt['grains.filter_by']({
            ...
        }, merge=salt['pillar.get']('apache:lookup')) %}


    :param lookup_dict: A dictionary, keyed by a grain, containing a value or
        values relevant to systems matching that grain. For example, a key
        could be the grain for an OS and the value could the name of a package
        on that particular OS.
    :param grain: The name of a grain to match with the current system's
        grains. For example, the value of the "os_family" grain for the current
        system could be used to pull values from the ``lookup_dict``
        dictionary.
    :param merge: A dictionary to merge with the ``lookup_dict`` before doing
        the lookup. This allows Pillar to override the values in the
        ``lookup_dict``. This could be useful, for example, to override the
        values for non-standard package names such as when using a different
        Python version from the default Python version provided by the OS
        (e.g., ``python26-mysql`` instead of ``python-mysql``).

    CLI Example:

        salt '*' grains.filter_by '{Debian: Debheads rule, RedHat: I love my hat}'
    

grains.get:

    Attempt to retrieve the named value from grains, if the named value is not
    available return the passed default. The default return is an empty string.

    The value can also represent a value in a nested dict using a ":" delimiter
    for the dict. This means that if a dict in grains looks like this::

        {'pkg': {'apache': 'httpd'}}

    To retrieve the value associated with the apache key in the pkg dict this
    key can be passed::

        pkg:apache

    CLI Example:

        salt '*' grains.get pkg:apache
    

grains.item:

    Return one or more grains

    CLI Example:

        salt '*' grains.item os
        salt '*' grains.item os osrelease oscodename

    Sanitized CLI Example:

        salt '*' grains.item host sanitize=True
    

grains.items:

    Return all of the minion's grains

    CLI Example:

        salt '*' grains.items

    Sanitized CLI Example:

        salt '*' grains.items sanitize=True
    

grains.ls:

    Return a list of all available grains

    CLI Example:

        salt '*' grains.ls
    

grains.remove:

    New in version 0.17.0

    Remove a value from a list in the grains config file

    CLI Example:

        salt '*' grains.remove key val
    

grains.setval:

    Set a grains value in the grains config file

    :param Destructive: If an operation results in a key being removed, delete the key, too. Defaults to False.

    CLI Example:

        salt '*' grains.setval key val
        salt '*' grains.setval key "{'sub-key': 'val', 'sub-key2': 'val2'}"
    

group.add:

    Add the specified group

    CLI Example:

        salt '*' group.add foo
    

group.delete:

    Remove the named group

    CLI Example:

        salt '*' group.delete foo
    

group.getent:

    Return info on all groups

    CLI Example:

        salt '*' group.getent
    

group.info:

    Return information about a group

    CLI Example:

        salt '*' group.info foo
    

hg.archive:

    Export a tarball from the repository

    cwd
        The path to the Mercurial repository

    output
        The path to the archive tarball

    rev: tip
        The revision to create an archive from

    fmt: None
        Format of the resulting archive. Mercurial supports: tar,
        tbz2, tgz, zip, uzip, and files formats.

    prefix : None
        Prepend <prefix>/ to every filename in the archive

    user : None
        Run hg as a user other than what the minion runs as

    If ``prefix`` is not specified it defaults to the basename of the repo
    directory.

    CLI Example:

        salt '*' hg.archive /path/to/repo output=/tmp/archive.tgz fmt=tgz
    

hg.clone:

    Clone a new repository

    cwd
        The path to the Mercurial repository

    repository
        The hg URI of the repository

    opts : None
        Any additional options to add to the command line

    user : None
        Run hg as a user other than what the minion runs as

    CLI Example:

        salt '*' hg.clone /path/to/repo https://bitbucket.org/birkenfeld/sphinx
    

hg.describe:

    Mimick git describe and return an identifier for the given revision

    cwd
        The path to the Mercurial repository

    rev: tip
        The path to the archive tarball

    user : None
        Run hg as a user other than what the minion runs as

    CLI Example:

        salt '*' hg.describe /path/to/repo
    

hg.pull:

    Perform a pull on the given repository

    cwd
        The path to the Mercurial repository

    opts : None
        Any additional options to add to the command line

    user : None
        Run hg as a user other than what the minion runs as

    CLI Example:

        salt '*' hg.pull /path/to/repo '-u'
    

hg.revision:

    Returns the long hash of a given identifier (hash, branch, tag, HEAD, etc)

    cwd
        The path to the Mercurial repository

    rev: tip
        The revision

    short: False
        Return an abbreviated commit hash

    user : None
        Run hg as a user other than what the minion runs as

    CLI Example:

        salt '*' hg.revision /path/to/repo mybranch
    

hg.update:

    Update to a given revision

    cwd
        The path to the Mercurial repository

    rev
        The revision to update to

    force : False
        Force an update

    user : None
        Run hg as a user other than what the minion runs as

    CLI Example:

        salt devserver1 hg.update /path/to/repo somebranch
    

hosts.add_host:

    Add a host to an existing entry, if the entry is not in place then create
    it with the given host

    CLI Example:

        salt '*' hosts.add_host <ip> <alias>
    

hosts.get_alias:

    Return the list of aliases associated with an ip

    CLI Example:

        salt '*' hosts.get_alias <ip addr>
    

hosts.get_ip:

    Return the ip associated with the named host

    CLI Example:

        salt '*' hosts.get_ip <hostname>
    

hosts.has_pair:

    Return true if the alias is set

    CLI Example:

        salt '*' hosts.has_pair <ip> <alias>
    

hosts.list_hosts:

    Return the hosts found in the hosts file in this format::

        {'<ip addr>': ['alias1', 'alias2', ...]}

    CLI Example:

        salt '*' hosts.list_hosts
    

hosts.rm_host:

    Remove a host entry from the hosts file

    CLI Example:

        salt '*' hosts.rm_host <ip> <alias>
    

hosts.set_host:

    Set the host entry in the hosts file for the given ip, this will overwrite
    any previous entry for the given ip

    CLI Example:

        salt '*' hosts.set_host <ip> <alias>
    

img.bootstrap:

    HIGHLY EXPERIMENTAL
    Bootstrap a virtual machine image

    location:
        The location to create the image

    size:
        The size of the image to create in megabytes

    fmt:
        The image format, raw or qcow2

    CLI Example:

        salt '*' qemu_nbd.bootstrap /srv/salt-images/host.qcow 4096 qcow2
    

img.mnt_image:

    Mount the named image and return the mount point

    CLI Example:

        salt '*' img.mount_image /tmp/foo
    

img.mount_image:

    Mount the named image and return the mount point

    CLI Example:

        salt '*' img.mount_image /tmp/foo
    

img.umount_image:

    Unmount an image mountpoint

    CLI Example:

        salt '*' img.umount_image /mnt/foo
    

key.finger:

    Return the minion's public key fingerprint

    CLI Example:

        salt '*' key.finger
    

match.compound:

    Return True if the minion matches the given compound target

    CLI Example:

        salt '*' match.compound 'L@cheese,foo and *'
    

match.data:

    Return True if the minion matches the given data target

    CLI Example:

        salt '*' match.data 'spam:eggs'
    

match.glob:

    Return True if the minion matches the given glob target

    CLI Example:

        salt '*' match.glob '*'
    

match.grain:

    Return True if the minion matches the given grain target. The ``delim``
    argument can be used to specify a different delimiter.

    CLI Example:

        salt '*' match.grain 'os:Ubuntu'
        salt '*' match.grain_pcre 'ipv6|2001:db8::ff00:42:8329' delim='|'

    Changed in version 0.16.4
        ``delim`` argument added
    

match.grain_pcre:

    Return True if the minion matches the given grain_pcre target. The
    ``delim`` argument can be used to specify a different delimiter.

    CLI Example:

        salt '*' match.grain_pcre 'os:Fedo.*'
        salt '*' match.grain_pcre 'ipv6|2001:.*' delim='|'

    Changed in version 0.16.4
        ``delim`` argument added
    

match.ipcidr:

    Return True if the minion matches the given ipcidr target

    CLI Example:

        salt '*' match.ipcidr '192.168.44.0/24'
    

match.list:

    Return True if the minion matches the given list target

    CLI Example:

        salt '*' match.list 'server1,server2'
    

match.pcre:

    Return True if the minion matches the given pcre target

    CLI Example:

        salt '*' match.pcre '.*'
    

match.pillar:

    Return True if the minion matches the given pillar target. The
    ``delim`` argument can be used to specify a different delimiter.

    CLI Example:

        salt '*' match.pillar 'cheese:foo'
        salt '*' match.pillar 'clone_url|https://github.com/saltstack/salt.git' delim='|'

    Changed in version 0.16.4
        ``delim`` argument added
    

mine.delete:

    Remove specific function contents of minion. Returns True on success.

    CLI Example:

        salt '*' mine.delete 'network.interfaces'
    

mine.flush:

    Remove all mine contents of minion. Returns True on success.

    CLI Example:

        salt '*' mine.flush
    

mine.get:

    Get data from the mine based on the target, function and expr_form

    Targets can be matched based on any standard matching system that can be
    matched on the master via these keywords::

        glob
        pcre
        grain
        grain_pcre

    CLI Example:

        salt '*' mine.get '*' network.interfaces
        salt '*' mine.get 'os:Fedora' network.interfaces grain
    

mine.send:

    Send a specific function to the mine.

    CLI Example:

        salt '*' mine.send network.interfaces eth0
    

mine.update:

    Execute the configured functions and send the data back up to the master
    The functions to be executed are merged from the master config, pillar and
    minion config under the option "function_cache":

        mine_functions:
          network.ip_addrs:
            - eth0
          disk.usage: []

    The function cache will be populated with information from executing these
    functions

    CLI Example:

        salt '*' mine.update
    

modjk.bulk_activate:

    Activate all the given workers in the specific load balancer

    CLI Examples:

        salt '*' modjk.bulk_activate node1,node2,node3
        salt '*' modjk.bulk_activate node1,node2,node3 other-profile

        salt '*' modjk.bulk_activate ["node1","node2","node3"]
        salt '*' modjk.bulk_activate ["node1","node2","node3"] other-profile
    

modjk.bulk_disable:

    Disable all the given workers in the specific load balancer

    CLI Examples:

        salt '*' modjk.bulk_disable node1,node2,node3
        salt '*' modjk.bulk_disable node1,node2,node3 other-profile

        salt '*' modjk.bulk_disable ["node1","node2","node3"]
        salt '*' modjk.bulk_disable ["node1","node2","node3"] other-profile
    

modjk.bulk_recover:

    Recover all the given workers in the specific load balancer

    CLI Examples:

        salt '*' modjk.bulk_recover node1,node2,node3
        salt '*' modjk.bulk_recover node1,node2,node3 other-profile

        salt '*' modjk.bulk_recover ["node1","node2","node3"]
        salt '*' modjk.bulk_recover ["node1","node2","node3"] other-profile
    

modjk.bulk_stop:

    Stop all the given workers in the specific load balancer

    CLI Examples:

        salt '*' modjk.bulk_stop node1,node2,node3
        salt '*' modjk.bulk_stop node1,node2,node3 other-profile

        salt '*' modjk.bulk_stop ["node1","node2","node3"]
        salt '*' modjk.bulk_stop ["node1","node2","node3"] other-profile
    

modjk.dump_config:

    Dump the original configuration that was loaded from disk

    CLI Examples:

        salt '*' modjk.dump_config
        salt '*' modjk.dump_config other-profile
    

modjk.get_running:

    Get the current running config (not from disk)

    CLI Examples:

        salt '*' modjk.get_running
        salt '*' modjk.get_running other-profile
    

modjk.lb_edit:

    Edit the loadbalancer settings

    Note: http://tomcat.apache.org/connectors-doc/reference/status.html
    Data Parameters for the standard Update Action

    CLI Examples:

        salt '*' modjk.lb_edit loadbalancer1 "{'vlr': 1, 'vlt': 60}"
        salt '*' modjk.lb_edit loadbalancer1 "{'vlr': 1, 'vlt': 60}" other-profile
    

modjk.list_configured_members:

    Return a list of member workers from the configuration files

    CLI Examples:

        salt '*' modjk.list_configured_members loadbalancer1
        salt '*' modjk.list_configured_members loadbalancer1 other-profile
    

modjk.recover_all:

    Set the all the workers in lbn to recover and activate them if they are not

    CLI Examples:

        salt '*' modjk.recover_all loadbalancer1
        salt '*' modjk.recover_all loadbalancer1 other-profile
    

modjk.reset_stats:

    Reset all runtime statistics for the load balancer

    CLI Examples:

        salt '*' modjk.reset_stats loadbalancer1
        salt '*' modjk.reset_stats loadbalancer1 other-profile
    

modjk.version:

    Return the modjk version

    CLI Examples:

        salt '*' modjk.version
        salt '*' modjk.version other-profile
    

modjk.worker_activate:

    Set the worker to activate state in the lbn load balancer

    CLI Examples:

        salt '*' modjk.worker_activate node1 loadbalancer1
        salt '*' modjk.worker_activate node1 loadbalancer1 other-profile
    

modjk.worker_disable:

    Set the worker to disable state in the lbn load balancer

    CLI Examples:

        salt '*' modjk.worker_disable node1 loadbalancer1
        salt '*' modjk.worker_disable node1 loadbalancer1 other-profile
    

modjk.worker_edit:

    Edit the worker settings

    Note: http://tomcat.apache.org/connectors-doc/reference/status.html
    Data Parameters for the standard Update Action

    CLI Examples:

        salt '*' modjk.worker_edit node1 loadbalancer1 "{'vwf': 500, 'vwd': 60}"
        salt '*' modjk.worker_edit node1 loadbalancer1 "{'vwf': 500, 'vwd': 60}" other-profile
    

modjk.worker_recover:

    Set the worker to recover
    this module will fail if it is in OK state

    CLI Examples:

        salt '*' modjk.worker_recover node1 loadbalancer1
        salt '*' modjk.worker_recover node1 loadbalancer1 other-profile
    

modjk.worker_status:

    Return the state of the worker

    CLI Examples:

        salt '*' modjk.worker_status node1
        salt '*' modjk.worker_status node1 other-profile
    

modjk.worker_stop:

    Set the worker to stopped state in the lbn load balancer

    CLI Examples:

        salt '*' modjk.worker_activate node1 loadbalancer1
        salt '*' modjk.worker_activate node1 loadbalancer1 other-profile
    

modjk.workers:

    Return a list of member workers and their status

    CLI Examples:

        salt '*' modjk.workers
        salt '*' modjk.workers other-profile
    

mount.active:

    List the active mounts.

    CLI Example:

        salt '*' mount.active
    

mount.fstab:

    List the contents of the fstab

    CLI Example:

        salt '*' mount.fstab
    

mount.is_fuse_exec:

    Returns true if the command passed is a fuse mountable application.

    CLI Example:

        salt '*' mount.is_fuse_exec sshfs
    

mount.mount:

    Mount a device

    CLI Example:

        salt '*' mount.mount /mnt/foo /dev/sdz1 True
    

mount.remount:

    Attempt to remount a device, if the device is not already mounted, mount
    is called

    CLI Example:

        salt '*' mount.remount /mnt/foo /dev/sdz1 True
    

mount.rm_fstab:

    Remove the mount point from the fstab

    CLI Example:

        salt '*' mount.rm_fstab /mnt/foo
    

mount.set_fstab:

    Verify that this mount is represented in the fstab, change the mount
    to match the data passed, or add the mount if it is not present.

    CLI Example:

        salt '*' mount.set_fstab /mnt/foo /dev/sdz1 ext4
    

mount.swapoff:

    Deactivate a named swap mount

    CLI Example:

        salt '*' mount.swapoff /root/swapfile
    

mount.swapon:

    Activate a swap disk

    CLI Example:

        salt '*' mount.swapon /root/swapfile
    

mount.swaps:

    Return a dict containing information on active swap

    CLI Example:

        salt '*' mount.swaps
    

mount.umount:

    Attempt to unmount a device by specifying the directory it is mounted on

    CLI Example:

        salt '*' mount.umount /mnt/foo
    

network.dig:

    Performs a DNS lookup with dig

    Note: dig must be installed on the Windows minion

    CLI Example:

        salt '*' network.dig archlinux.org
    

network.hw_addr:

    Return the hardware address (a.k.a. MAC address) for a given interface

    CLI Example:

        salt '*' network.hw_addr 'Wireless Connection #1'
    

network.hwaddr:

    Return the hardware address (a.k.a. MAC address) for a given interface

    CLI Example:

        salt '*' network.hw_addr 'Wireless Connection #1'
    

network.in_subnet:

    Returns True if host is within specified subnet, otherwise False

    CLI Example:

        salt '*' network.in_subnet 10.0.0.0/16
    

network.interfaces:

    Return a dictionary of information about all the interfaces on the minion

    CLI Example:

        salt '*' network.interfaces
    

network.ip_addrs:

    Returns a list of IPv4 addresses assigned to the host. 127.0.0.1 is
    ignored, unless 'include_loopback=True' is indicated. If 'interface' is
    provided, then only IP addresses from that interface will be returned.

    CLI Example:

        salt '*' network.ip_addrs
    

network.ip_addrs6:

    Returns a list of IPv6 addresses assigned to the host. ::1 is ignored,
    unless 'include_loopback=True' is indicated. If 'interface' is provided,
    then only IP addresses from that interface will be returned.

    CLI Example:

        salt '*' network.ip_addrs6
    

network.ipaddrs:

    Returns a list of IPv4 addresses assigned to the host. 127.0.0.1 is
    ignored, unless 'include_loopback=True' is indicated. If 'interface' is
    provided, then only IP addresses from that interface will be returned.

    CLI Example:

        salt '*' network.ip_addrs
    

network.ipaddrs6:

    Returns a list of IPv6 addresses assigned to the host. ::1 is ignored,
    unless 'include_loopback=True' is indicated. If 'interface' is provided,
    then only IP addresses from that interface will be returned.

    CLI Example:

        salt '*' network.ip_addrs6
    

network.netstat:

    Return information on open ports and states

    CLI Example:

        salt '*' network.netstat
    

network.nslookup:

    Query DNS for information about a domain or ip address

    CLI Example:

        salt '*' network.nslookup archlinux.org
    

network.ping:

    Performs a ping to a host

    CLI Example:

        salt '*' network.ping archlinux.org
    

network.subnets:

    Returns a list of subnets to which the host belongs

    CLI Example:

        salt '*' network.subnets
    

network.traceroute:

    Performs a traceroute to a 3rd party host

    CLI Example:

        salt '*' network.traceroute archlinux.org
    

pillar.data:

    This function calls the master for a fresh pillar and generates the pillar
    data on the fly, unlike pillar.raw which returns the pillar data which
    is currently loaded into the minion.

    CLI Example:

        salt '*' pillar.items
    

pillar.ext:

    Generate the pillar and apply an explicit external pillar

    CLI Example:

        salt '*' pillar.ext 'libvirt: _'
    

pillar.get:

    New in version 0.14

    Attempt to retrieve the named value from pillar, if the named value is not
    available return the passed default. The default return is an empty string.

    The value can also represent a value in a nested dict using a ":" delimiter
    for the dict. This means that if a dict in pillar looks like this::

        {'pkg': {'apache': 'httpd'}}

    To retrieve the value associated with the apache key in the pkg dict this
    key can be passed::

        pkg:apache

    CLI Example:

        salt '*' pillar.get pkg:apache
    

pillar.item:

    New in version 0.16.2

    Return one ore more pillar entries

    CLI Examples:

        salt '*' pillar.item foo
        salt '*' pillar.item foo bar baz
    

pillar.items:

    This function calls the master for a fresh pillar and generates the pillar
    data on the fly, unlike pillar.raw which returns the pillar data which
    is currently loaded into the minion.

    CLI Example:

        salt '*' pillar.items
    

pillar.raw:

    Return the raw pillar data that is available in the module. This will
    show the pillar as it is loaded as the __pillar__ dict.

    CLI Example:

        salt '*' pillar.raw

    With the optional key argument, you can select a subtree of the
    pillar raw data.::

        salt '*' pillar.raw key='roles'
    

pip.freeze:

    Return a list of installed packages either globally or in the specified
    virtualenv

    bin_env
        path to pip bin or path to virtualenv. If doing an uninstall from
        the system python and want to use a specific pip bin (pip-2.7,
        pip-2.6, etc..) just specify the pip bin you want.
        If uninstalling from a virtualenv, just use the path to the virtualenv
        (/home/code/path/to/virtualenv/)
    user
        The user under which to run pip

    Note:
        The ``runas`` argument is deprecated as of 0.16.2. ``user`` should be
        used instead.

    cwd
        Current working directory to run pip from

    CLI Example:

        salt '*' pip.freeze /home/code/path/to/virtualenv/
    

pip.install:

    Install packages with pip

    Install packages individually or from a pip requirements file. Install
    packages globally or to a virtualenv.

    pkgs
        comma separated list of packages to install
    requirements
        path to requirements
    bin_env
        path to pip bin or path to virtualenv. If doing a system install,
        and want to use a specific pip bin (pip-2.7, pip-2.6, etc..) just
        specify the pip bin you want.
        If installing into a virtualenv, just use the path to the virtualenv
        (/home/code/path/to/virtualenv/)
    env
        deprecated, use bin_env now
    use_wheel
        Prefer wheel archives (requires pip>=1.4)
    log
        Log file where a complete (maximum verbosity) record will be kept
    proxy
        Specify a proxy in the form
        user:passwd@proxy.server:port. Note that the
        user:password@ is optional and required only if you
        are behind an authenticated proxy.  If you provide
        user@proxy.server:port then you will be prompted for a
        password.
    timeout
        Set the socket timeout (default 15 seconds)
    editable
        install something editable (i.e.
        git+https://github.com/worldcompany/djangoembed.git#egg=djangoembed)
    find_links
        URL to look for packages at
    index_url
        Base URL of Python Package Index
    extra_index_url
        Extra URLs of package indexes to use in addition to ``index_url``
    no_index
        Ignore package index
    mirrors
        Specific mirror URL(s) to query (automatically adds --use-mirrors)
    build
        Unpack packages into ``build`` dir
    target
        Install packages into ``target`` dir
    download
        Download packages into ``download`` instead of installing them
    download_cache
        Cache downloaded packages in ``download_cache`` dir
    source
        Check out ``editable`` packages into ``source`` dir
    upgrade
        Upgrade all packages to the newest available version
    force_reinstall
        When upgrading, reinstall all packages even if they are already
        up-to-date.
    ignore_installed
        Ignore the installed packages (reinstalling instead)
    exists_action
        Default action when a path already exists: (s)witch, (i)gnore, (w)wipe,
        (b)ackup
    no_deps
        Ignore package dependencies
    no_install
        Download and unpack all packages, but don't actually install them
    no_download
        Don't download any packages, just install the ones
        already downloaded (completes an install run with
        --no-install)
    install_options
        Extra arguments to be supplied to the setup.py install
        command (use like --install-option="--install-
        scripts=/usr/local/bin").  Use multiple --install-
        option options to pass multiple options to setup.py
        install.  If you are using an option with a directory
        path, be sure to use absolute path.
    global_options
        Extra global options to be supplied to the setup.py call before the
        install command.
    user
        The user under which to run pip

    Note:
        The ``runas`` argument is deprecated as of 0.16.2. ``user`` should be
        used instead.

    no_chown
        When user is given, do not attempt to copy and chown
        a requirements file
    cwd
        Current working directory to run pip from
    activate
        Activates the virtual environment, if given via bin_env,
        before running install.
    pre_releases
        Include pre-releases in the available versions


    CLI Example:

        salt '*' pip.install <package name>,<package2 name>
        salt '*' pip.install requirements=/path/to/requirements.txt
        salt '*' pip.install <package name> bin_env=/path/to/virtualenv
        salt '*' pip.install <package name> bin_env=/path/to/pip_bin

    Complicated CLI example::

        salt '*' pip.install markdown,django editable=git+https://github.com/worldcompany/djangoembed.git#egg=djangoembed upgrade=True no_deps=True

    

pip.list:

    Filter list of installed apps from ``freeze`` and check to see if
    ``prefix`` exists in the list of packages installed.

    CLI Example:

        salt '*' pip.list salt
    

pip.uninstall:

    Uninstall packages with pip

    Uninstall packages individually or from a pip requirements file. Uninstall
    packages globally or from a virtualenv.

    pkgs
        comma separated list of packages to install
    requirements
        path to requirements
    bin_env
        path to pip bin or path to virtualenv. If doing an uninstall from
        the system python and want to use a specific pip bin (pip-2.7,
        pip-2.6, etc..) just specify the pip bin you want.
        If uninstalling from a virtualenv, just use the path to the virtualenv
        (/home/code/path/to/virtualenv/)
    log
        Log file where a complete (maximum verbosity) record will be kept
    proxy
        Specify a proxy in the form
        user:passwd@proxy.server:port. Note that the
        user:password@ is optional and required only if you
        are behind an authenticated proxy.  If you provide
        user@proxy.server:port then you will be prompted for a
        password.
    timeout
        Set the socket timeout (default 15 seconds)
    user
        The user under which to run pip

    Note:
        The ``runas`` argument is deprecated as of 0.16.2. ``user`` should be
        used instead.

    no_chown
        When user is given, do not attempt to copy and chown
        a requirements file
    cwd
        Current working directory to run pip from

    CLI Example:

        salt '*' pip.uninstall <package name>,<package2 name>
        salt '*' pip.uninstall requirements=/path/to/requirements.txt
        salt '*' pip.uninstall <package name> bin_env=/path/to/virtualenv
        salt '*' pip.uninstall <package name> bin_env=/path/to/pip_bin

    

pip.version:

    New in version 0.17.0

    Returns the version of pip. Use ``bin_env`` to specify the path to a
    virtualenv and get the version of pip in that virtualenv.

    If unable to detect the pip version, returns ``None``.

    CLI Example:

        salt '*' pip.version
    

pkg.LooseVersion:
Version numbering for anarchists and software realists.
    Implements the standard interface for version number classes as
    described above.  A version number consists of a series of numbers,
    separated by either periods or strings of letters.  When comparing
    version numbers, the numeric components will be compared
    numerically, and the alphabetic components lexically.  The following
    are all valid version numbers, in no particular order:

        1.5.1
        1.5.2b2
        161
        3.10a
        8.02
        3.4j
        1996.07.12
        3.2.pl0
        3.1.1.6
        2g6
        11g
        0.960923
        2.2beta29
        1.13++
        5.5.kw
        2.0b1pl0

    In fact, there is no such thing as an invalid version number under
    this scheme; the rules for comparison are simple and predictable,
    but may not always give the results you want (for some definition
    of "want").
    

pkg.available_version:

    Return the latest version of the named package available for upgrade or
    installation. If more than one package name is specified, a dict of
    name/version pairs is returned.

    If the latest version of a given package is already installed, an empty
    string will be returned for that package.

    CLI Example:

        salt '*' pkg.latest_version <package name>
        salt '*' pkg.latest_version <package1> <package2> <package3> ...

    

pkg.get_repo_data:

    Returns the cached winrepo data

    CLI Example:

        salt '*' pkg.get_repo_data
    

pkg.install:

    Install the passed package

    Return a dict containing the new package names and versions::

        {'<package>': {'old': '<old-version>',
                       'new': '<new-version>'}}

    CLI Example:

        salt '*' pkg.install <package name>
    

pkg.latest_version:

    Return the latest version of the named package available for upgrade or
    installation. If more than one package name is specified, a dict of
    name/version pairs is returned.

    If the latest version of a given package is already installed, an empty
    string will be returned for that package.

    CLI Example:

        salt '*' pkg.latest_version <package name>
        salt '*' pkg.latest_version <package1> <package2> <package3> ...

    

pkg.list_available:

    Return a list of available versions of the specified package.

    CLI Example:

        salt '*' pkg.list_available <package name>
        salt '*' pkg.list_available <package name01> <package name02>
    

pkg.list_pkgs:

    List the packages currently installed in a dict::

        {'<package_name>': '<version>'}

    CLI Example:

        salt '*' pkg.list_pkgs
        salt '*' pkg.list_pkgs versions_as_list=True
    

pkg.list_upgrades:

    List all available package upgrades on this system

    CLI Example:

        salt '*' pkg.list_upgrades
    

pkg.purge:

    Package purges are not supported, this function is identical to
    ``remove()``.

    name
        The name of the package to be deleted.

    version
        The version of the package to be deleted. If this option is used in
        combination with the ``pkgs`` option below, then this version will be
        applied to all targeted packages.


    Multiple Package Options:

    pkgs
        A list of packages to delete. Must be passed as a python list. The
        ``name`` parameter will be ignored if this option is passed.

    New in version 0.16.0


    Returns a dict containing the changes.

    CLI Example:

        salt '*' pkg.purge <package name>
        salt '*' pkg.purge <package1>,<package2>,<package3>
        salt '*' pkg.purge pkgs='["foo", "bar"]'
    

pkg.refresh_db:

    Just recheck the repository and return a dict::

        {'<database name>': Bool}

    CLI Example:

        salt '*' pkg.refresh_db
    

pkg.remove:

    Remove packages.

    name
        The name of the package to be deleted.

    version
        The version of the package to be deleted. If this option is used in
        combination with the ``pkgs`` option below, then this version will be
        applied to all targeted packages.

    Multiple Package Options:

    pkgs
        A list of packages to delete. Must be passed as a python list. The
        ``name`` parameter will be ignored if this option is passed.

    New in version 0.16.0


    Returns a dict containing the changes.

    CLI Example:

        salt '*' pkg.remove <package name>
        salt '*' pkg.remove <package1>,<package2>,<package3>
        salt '*' pkg.remove pkgs='["foo", "bar"]'
    

pkg.upgrade:

    Run a full system upgrade

    Return a dict containing the new package names and versions::

        {'<package>': {'old': '<old-version>',
                       'new': '<new-version>'}}

    CLI Example:

        salt '*' pkg.upgrade
    

pkg.upgrade_available:

    Check whether or not an upgrade is available for a given package

    CLI Example:

        salt '*' pkg.upgrade_available <package name>
    

pkg.version:

    Returns a version if the package is installed, else returns an empty string

    CLI Example:

        salt '*' pkg.version <package name>
    

pkg_resource.add_pkg:

    Add a package to a dict of installed packages.

    CLI Example:

        salt '*' pkg_resource.add_pkg '{}' bind 9
    

pkg_resource.check_extra_requirements:

    Check if the installed package already has the given requirements.
    This function will simply try to call "pkg.check_extra_requirements".

    CLI Example:

        salt '*' pkg_resource.check_extra_requirements <pkgname> <extra_requirements>
    

pkg_resource.find_changes:

    Compare before and after results from pkg.list_pkgs() to determine what
    changes were made to the packages installed on the minion.

    CLI Example:

        salt '*' pkg_resource.find_changes
    

pkg_resource.pack_sources:

    Accepts list of dicts (or a string representing a list of dicts) and packs
    the key/value pairs into a single dict.

    ``'[{"foo": "salt://foo.rpm"}, {"bar": "salt://bar.rpm"}]'`` would become
    ``{"foo": "salt://foo.rpm", "bar": "salt://bar.rpm"}``

    CLI Example:

        salt '*' pkg_resource.pack_sources '[{"foo": "salt://foo.rpm"}, {"bar": "salt://bar.rpm"}]'
    

pkg_resource.parse_targets:

    Parses the input to pkg.install and returns back the package(s) to be
    installed. Returns a list of packages, as well as a string noting whether
    the packages are to come from a repository or a binary package.

    CLI Example:

        salt '*' pkg_resource.parse_targets
    

pkg_resource.sort_pkglist:

    Accepts a dict obtained from pkg.list_pkgs() and sorts in place the list of
    versions for any packages that have multiple versions installed, so that
    two package lists can be compared to one another.

    CLI Example:

        salt '*' pkg_resource.sort_pkglist '["3.45", "2.13"]'
    

pkg_resource.stringify:

    Takes a dict of package name/version information and joins each list of
    installed versions into a string.

    CLI Example:

        salt '*' pkg_resource.stringify 'vim: 7.127'
    

pkg_resource.version:

    Common interface for obtaining the version of installed packages.

    CLI Example:

        salt '*' pkg_resource.version vim
        salt '*' pkg_resource.version foo bar baz
        salt '*' pkg_resource.version 'python*'
    

pkg_resource.version_clean:

    Clean the version string removing extra data.
    This function will simply try to call ``pkg.version_clean``.

    CLI Example:

        salt '*' pkg_resource.version_clean <version_string>
    

ps.boot_time:

    Return the boot time in number of seconds since the epoch began.

    CLI Example:

        salt '*' ps.boot_time
    

ps.cached_physical_memory:

    Return the amount cached memory.

    CLI Example:

        salt '*' ps.cached_physical_memory
    

ps.cpu_percent:

    Return the percent of time the CPU is busy.

    interval
        the number of seconds to sample CPU usage over
    per_cpu
        if True return an array of CPU percent busy for each CPU, otherwise
        aggregate all percents into one number

    CLI Example:

        salt '*' ps.cpu_percent
    

ps.cpu_times:

    Return the percent of time the CPU spends in each state,
    e.g. user, system, idle, nice, iowait, irq, softirq.

    per_cpu
        if True return an array of percents for each CPU, otherwise aggregate
        all percents into one number

    CLI Example:

        salt '*' ps.cpu_times
    

ps.disk_io_counters:

    Return disk I/O statisitics.

    CLI Example:

        salt '*' ps.disk_io_counters
    

ps.disk_partition_usage:

    Return a list of disk partitions plus the mount point, filesystem and usage
    statistics.

    CLI Example:

        salt '*' ps.disk_partition_usage
    

ps.disk_partitions:

    Return a list of disk partitions and their device, mount point, and
    filesystem type.

    all
        if set to False, only return local, physical partitions (hard disk,
        USB, CD/DVD partitions).  If True, return all filesystems.

    CLI Example:

        salt '*' ps.disk_partitions
    

ps.disk_usage:

    Given a path, return a dict listing the total available space as well as
    the free space, and used space.

    CLI Example:

        salt '*' ps.disk_usage /home
    

ps.get_pid_list:

    Return a list of process ids (PIDs) for all running processes.

    CLI Example:

        salt '*' ps.get_pid_list
    

ps.kill_pid:

    Kill a proccess by PID.

        salt 'minion' ps.kill_pid pid [signal=signal_number]

    pid
        PID of process to kill.

    signal
        Signal to send to the process. See manpage entry for kill
        for possible values. Default: 15 (SIGTERM).

    **Example:**

    Send SIGKILL to process with PID 2000:

        salt 'minion' ps.kill_pid 2000 signal=9
    

ps.network_io_counters:

    Return network I/O statisitics.

    CLI Example:

        salt '*' ps.network_io_counters
    

ps.num_cpus:

    Return the number of CPUs.

    CLI Example:

        salt '*' ps.num_cpus
    

ps.pgrep:

    Return the pids for processes matching a pattern.

    If full is true, the full command line is searched for a match,
    otherwise only the name of the command is searched.

        salt '*' ps.pgrep pattern [user=username] [full=(true|false)]

    pattern
        Pattern to search for in the process list.

    user
        Limit matches to the given username. Default: All users.

    full
        A boolean value indicating whether only the name of the command or
        the full command line should be matched against the pattern.

    **Examples:**

    Find all httpd processes on all 'www' minions:

        salt 'www.*' httpd

    Find all bash processes owned by user 'tom':

        salt '*' bash user=tom
    

ps.physical_memory_buffers:

    Return the amount of physical memory buffers.

    CLI Example:

        salt '*' ps.physical_memory_buffers
    

ps.physical_memory_usage:

    Return a dict that describes free and available physical memory.

    CLI Examples:

        salt '*' ps.physical_memory_usage
    

ps.pkill:

    Kill processes matching a pattern.

        salt '*' ps.pkill pattern [user=username] [signal=signal_number] \
                [full=(true|false)]

    pattern
        Pattern to search for in the process list.

    user
        Limit matches to the given username. Default: All users.

    signal
        Signal to send to the process(es). See manpage entry for kill
        for possible values. Default: 15 (SIGTERM).

    full
        A boolean value indicating whether only the name of the command or
        the full command line should be matched against the pattern.

    **Examples:**

    Send SIGHUP to all httpd processes on all 'www' minions:

        salt 'www.*' httpd signal=1

    Send SIGKILL to all bash processes owned by user 'tom':

        salt '*' bash signal=9 user=tom
    

ps.top:

    Return a list of top CPU consuming processes during the interval.
    num_processes = return the top N CPU consuming processes
    interval = the number of seconds to sample CPU usage over

    CLI Examples:

        salt '*' ps.top

        salt '*' ps.top 5 10
    

ps.total_physical_memory:

    Return the total number of bytes of physical memory.

    CLI Example:

        salt '*' ps.total_physical_memory
    

ps.virtual_memory_usage:

    Return a dict that describes free and available memory, both physical
    and virtual.

    CLI Example:

        salt '*' ps.virtual_memory_usage
    

publish.full_data:

    Return the full data about the publication, this is invoked in the same
    way as the publish function

    CLI Example:

        salt system.example.com publish.full_data '*' cmd.run 'ls -la /tmp'

    .. admonition:: Attention

        If you need to pass a value to a function argument and that value
        contains an equal sign, you **must** include the argument name.
        For example:

            salt '*' publish.full_data test.kwarg arg='cheese=spam'

    

publish.publish:

    Publish a command from the minion out to other minions.

    Publications need to be enabled on the Salt master and the minion
    needs to have permission to publish the command. The Salt master
    will also prevent a recursive publication loop, this means that a
    minion cannot command another minion to command another minion as
    that would create an infinite command loop.

    The expr_form argument is used to pass a target other than a glob into
    the execution, the available options are:

    - glob
    - pcre
    - grain
    - grain_pcre
    - pillar
    - ipcidr
    - range
    - compound

    The arguments sent to the minion publish function are separated with
    commas. This means that for a minion executing a command with multiple
    args it will look like this:

        salt system.example.com publish.publish '*' user.add 'foo,1020,1020'
        salt system.example.com publish.publish 'os:Fedora' network.interfaces '' grain

    CLI Example:

        salt system.example.com publish.publish '*' cmd.run 'ls -la /tmp'


    .. admonition:: Attention

        If you need to pass a value to a function argument and that value
        contains an equal sign, you **must** include the argument name.
        For example:

            salt '*' publish.publish test.kwarg arg='cheese=spam'


    

publish.runner:

    Execute a runner on the master and return the data from the runner
    function

    CLI Example:

        salt publish.runner manage.down
    

rbenv.default:

    Returns or sets the currently defined default ruby.

    ruby=None
        The version to set as the default. Should match one of the versions
        listed by :mod:`rbenv.versions <salt.modules.rbenv.versions>`. Leave
        blank to return the current default.

    CLI Example:

        salt '*' rbenv.default
        salt '*' rbenv.default 2.0.0-p0
    

rbenv.install:

    Install Rbenv systemwide

    CLI Example:

        salt '*' rbenv.install
    

rbenv.install_ruby:

    Install a ruby implementation.

    ruby
        The version of Ruby to install, should match one of the
        versions listed by rbenv.list

    CLI Example:

        salt '*' rbenv.install_ruby 2.0.0-p0
    

rbenv.is_installed:

    Check if Rbenv is installed.

    CLI Example:

        salt '*' rbenv.is_installed
    

rbenv.list:

    List the installable versions of ruby.

    CLI Example:

        salt '*' rbenv.list
    

rbenv.uninstall_ruby:

    Uninstall a ruby implementation.

    ruby
        The version of ruby to uninstall. Should match one of the versions
        listed by :mod:`rbenv.versions <salt.modules.rbenv.versions>`

    CLI Example:

        salt '*' rbenv.uninstall_ruby 2.0.0-p0
    

rbenv.update:

    Updates the current versions of Rbenv and Ruby-Build

    CLI Example:

        salt '*' rbenv.update
    

rbenv.versions:

    List the installed versions of ruby.

    CLI Example:

        salt '*' rbenv.versions
    

rdp.disable:

    Disable RDP the service on the server

    CLI Example:

        salt '*' rdp.disable
    

rdp.enable:

    Enable RDP the service on the server

    CLI Example:

        salt '*' rdp.enable
    

rdp.status:

    Show if rdp is enabled on the server

    CLI Example:

        salt '*' rdp.status
    

reg.Registry:

    Delay '_winreg' usage until this module is used
    

reg.create_key:

    Create a registry key

    CLI Example:

        salt '*' reg.create_key HKEY_CURRENT_USER 'SOFTWARE\Salt' 'version' '0.97'
    

reg.delete_key:

    Delete a registry key

    Note: This cannot delete a key with subkeys

    CLI Example:

        salt '*' reg.delete_key HKEY_CURRENT_USER 'SOFTWARE\Salt' 'version'
    

reg.read_key:

    Read registry key value

    CLI Example:

        salt '*' reg.read_key HKEY_LOCAL_MACHINE 'SOFTWARE\Salt' 'version'
    

reg.set_key:

    Set a registry key
    vtype: http://docs.python.org/2/library/_winreg.html#value-types

    CLI Example:

        salt '*' reg.set_key HKEY_CURRENT_USER 'SOFTWARE\Salt' 'version' '0.97' REG_DWORD
    

ret.get_fun:

    Return info about last time fun was called on each minion

    CLI Example:

        salt '*' ret.get_fun mysql network.interfaces
    

ret.get_jid:

    Return the information for a specified job id

    CLI Example:

        salt '*' ret.get_jid redis 20421104181954700505
    

ret.get_jids:

    Return a list of all job ids

    CLI Example:

        salt '*' ret.get_jids mysql
    

ret.get_minions:

    Return a list of all minions

    CLI Example:

        salt '*' ret.get_minions mysql
    

rvm.do:

    Execute a command in an RVM controlled environment.

    ruby:
        The ruby to use.
    command:
        The command to execute.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.do 2.0.0 <command>
    

rvm.gemset_copy:

    Copy all gems from one gemset to another.

    source
        The name of the gemset to copy, complete with ruby version.
    destination
        The destination gemset.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_copy foobar bazquo
    

rvm.gemset_create:

    Creates a gemset.

    ruby
        The ruby version to create the gemset for.
    gemset
        The name of the gemset to create.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_create 2.0.0 foobar
    

rvm.gemset_delete:

    Deletes a gemset.

    ruby
        The ruby version the gemset belongs to.
    gemset
        The gemset to delete.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_delete 2.0.0 foobar
    

rvm.gemset_empty:

    Remove all gems from a gemset.

    ruby
        The ruby version the gemset belongs to.
    gemset
        The gemset to empty.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_empty 2.0.0 foobar
    

rvm.gemset_list:

    List all gemsets for the given ruby.

    ruby : default
        The ruby version to list the gemsets for
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_list
    

rvm.gemset_list_all:

    List all gemsets for all installed rubies.

    Note that you must have set a default ruby before this can work.

    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.gemset_list_all
    

rvm.get:

    Update RVM.

    version : stable
        Which version of RVM to install, e.g. stable or head.
    ruby
        The version of ruby to reinstall.

    CLI Example:

        salt '*' rvm.get
    

rvm.install:

    Install RVM system wide.

    CLI Example:

        salt '*' rvm.install
    

rvm.install_ruby:

    Install a ruby implementation.

    ruby
        The version of ruby to install.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.install_ruby 1.9.3-p385
    

rvm.is_installed:

    Check if RVM is installed.

    CLI Example:

        salt '*' rvm.is_installed
    

rvm.list:

    List all rvm installed rubies.

    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.list
    

rvm.reinstall_ruby:

    Reinstall a ruby implementation.

    ruby
        The version of ruby to reinstall.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.reinstall_ruby 1.9.3-p385
    

rvm.rubygems:

    Installs a specific rubygems version in the given ruby.

    ruby
        The ruby to install rubygems for.
    version
        The version of rubygems to install or 'remove' to use the version that
        ships with 1.9
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.rubygems 2.0.0 1.8.24
    

rvm.set_default:

    Set the default ruby.

    ruby
        The version of ruby to make the default.
    runas : None
        The user to run rvm as.

    CLI Example:

        salt '*' rvm.set_default 2.0.0
    

rvm.wrapper:

    Install RVM wrapper scripts.

    ruby_string
        Ruby/gemset to install wrappers for.
    wrapper_prefix
        What to prepend to the name of the generated wrapper binaries.
    runas : None
        The user to run rvm as.
    binaries : None
        The names of the binaries to create wrappers for. When nothing is
        given, wrappers for ruby, gem, rake, irb, rdoc, ri and testrb are
        generated.

    CLI Example:

        salt '*' rvm.wrapper <ruby_string> <wrapper_prefix>
    

s3.delete:

    Delete a bucket, or delete an object from a bucket.

    CLI Example to delete a bucket::

        salt myminion s3.delete mybucket

    CLI Example to delete an object from a bucket::

        salt myminion s3.delete mybucket remoteobject
    

s3.get:

    List the contents of a bucket, or return an object from a bucket. Set
    return_bin to True in order to retrieve an object wholesale. Otherwise,
    Salt will attempt to parse an XML response.

    CLI Example to list buckets:

        salt myminion s3.get

    CLI Example to list the contents of a bucket:

        salt myminion s3.get mybucket

    CLI Example to return the binary contents of an object:

        salt myminion s3.get mybucket myfile.png return_bin=True

    CLI Example to save the binary contents of an object to a local file:

        salt myminion s3.get mybucket myfile.png local_file=/tmp/myfile.png

    It is also possible to perform an action on a bucket. Currently, S3
    supports the following actions::

        acl
        cors
        lifecycle
        policy
        location
        logging
        notification
        tagging
        versions
        requestPayment
        versioning
        website

    To perform an action on a bucket:

        salt myminion s3.get mybucket myfile.png action=acl
    

s3.head:

    Return the metadata for a bucket, or an object in a bucket.

    CLI Examples:

        salt myminion s3.head mybucket
        salt myminion s3.head mybucket myfile.png
    

s3.put:

    Create a new bucket, or upload an object to a bucket.

    CLI Example to create a bucket:

        salt myminion s3.put mybucket

    CLI Example to upload an object to a bucket:

        salt myminion s3.put mybucket remotepath local_path=/path/to/file
    

saltutil.cmd:

    Assuming this minion is a master, execute a salt command

    CLI Example:

        salt '*' saltutil.cmd
    

saltutil.cmd_iter:

    Assuming this minion is a master, execute a salt command

    CLI Example:

        salt '*' saltutil.cmd
    

saltutil.find_job:

    Return the data for a specific job id

    CLI Example:

        salt '*' saltutil.find_job <job id>
    

saltutil.is_running:

    If the named function is running return the data associated with it/them.
    The argument can be a glob

    CLI Example:

        salt '*' saltutil.is_running state.highstate
    

saltutil.kill_job:

    Sends a kill signal (SIGKILL 9) to the named salt job's process

    CLI Example:

        salt '*' saltutil.kill_job <job id>
    

saltutil.refresh_modules:

    Signal the minion to refresh the module and grain data

    CLI Example:

        salt '*' saltutil.refresh_modules
    

saltutil.refresh_pillar:

    Signal the minion to refresh the pillar data.

    CLI Example:

        salt '*' saltutil.refresh_pillar
    

saltutil.regen_keys:

    Used to regenerate the minion keys.

    CLI Example:

        salt '*' saltutil.regen_keys
    

saltutil.revoke_auth:

    The minion sends a request to the master to revoke its own key.
    Note that the minion session will be revoked and the minion may
    not be able to return the result of this command back to the master.

    CLI Example:

        salt '*' saltutil.revoke_auth
    

saltutil.running:

    Return the data on all running salt processes on the minion

    CLI Example:

        salt '*' saltutil.running
    

saltutil.signal_job:

    Sends a signal to the named salt job's process

    CLI Example:

        salt '*' saltutil.signal_job <job id> 15
    

saltutil.sync_all:

    Sync down all of the dynamic modules from the file server for a specific
    environment

    CLI Example:

        salt '*' saltutil.sync_all
    

saltutil.sync_grains:

    Sync the grains from the _grains directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _grains directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_grains
    

saltutil.sync_modules:

    Sync the modules from the _modules directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _modules directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_modules
    

saltutil.sync_outputters:

    Sync the outputters from the _outputters directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _outputters directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_outputters
    

saltutil.sync_renderers:

    Sync the renderers from the _renderers directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _renderers directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_renderers
    

saltutil.sync_returners:

    Sync the returners from the _returners directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _returners directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_returners
    

saltutil.sync_states:

    Sync the states from the _states directory on the salt master file
    server. This function is environment aware, pass the desired environment
    to grab the contents of the _states directory, base is the default
    environment.

    CLI Example:

        salt '*' saltutil.sync_states
    

saltutil.term_job:

    Sends a termination signal (SIGTERM 15) to the named salt job's process

    CLI Example:

        salt '*' saltutil.term_job <job id>
    

saltutil.update:

    Update the salt minion from the URL defined in opts['update_url']


    This feature requires the minion to be running a bdist_esky build.

    The version number is optional and will default to the most recent version
    available at opts['update_url'].

    Returns details about the transaction upon completion.

    CLI Example:

        salt '*' saltutil.update 0.10.3
    

seed.apply:

    Seed a location (disk image, directory, or block device) with the
    minion config, approve the minion's key, and/or install salt-minion.

    CLI Example:

        salt 'minion' seed.whatever path id [config=config_data] \
                [gen_key=(true|false)] [approve_key=(true|false)] \
                [install=(true|false)]

    path
        Full path to the directory, device, or disk image  on the target
        minion's file system.

    id
        Minion id with which to seed the path.

    config
        Minion configuration options. By default, the 'master' option is set to
        the target host's 'master'.

    approve_key
        Request a pre-approval of the generated minion key. Requires
        that the salt-master be configured to either auto-accept all keys or
        expect a signing request from the target host. Default: true.

    install
        Install salt-minion, if absent. Default: true.
    

service.available:

    Returns ``True`` if the specified service is available, otherwise returns
    ``False``.

    CLI Example:

        salt '*' service.available <service name>
    

service.disable:

    Disable the named service to start at boot

    CLI Example:

        salt '*' service.disable <service name>
    

service.disabled:

    Check to see if the named service is disabled to start on boot

    CLI Example:

        salt '*' service.disabled <service name>
    

service.enable:

    Enable the named service to start at boot

    CLI Example:

        salt '*' service.enable <service name>
    

service.enabled:

    Check to see if the named service is enabled to start on boot

    CLI Example:

        salt '*' service.enabled <service name>
    

service.get_all:

    Return all installed services

    CLI Example:

        salt '*' service.get_all
    

service.get_disabled:

    Return the disabled services

    CLI Example:

        salt '*' service.get_disabled
    

service.get_enabled:

    Return the enabled services

    CLI Example:

        salt '*' service.get_enabled
    

service.get_service_name:

    The Display Name is what is displayed in Windows when services.msc is
    executed.  Each Display Name has an associated Service Name which is the
    actual name of the service.  This function allows you to discover the
    Service Name by returning a dictionary of Display Names and Service Names,
    or filter by adding arguments of Display Names.

    If no args are passed, return a dict of all services where the keys are the
    service Display Names and the values are the Service Names.

    If arguments are passed, create a dict of Display Names and Service Names

    CLI Example:

        salt '*' service.get_service_name
        salt '*' service.get_service_name 'Google Update Service (gupdate)' 'DHCP Client'
    

service.getsid:

    Return the sid for this windows service

    CLI Example:

        salt '*' service.getsid <service name>
    

service.has_powershell:

    Confirm if Powershell is available

    CLI Example:

        salt '*' service.has_powershell
    

service.missing:

    The inverse of service.available.
    Returns ``True`` if the specified service is not available, otherwise returns
    ``False``.

    CLI Example:

        salt '*' service.missing <service name>
    

service.restart:

    Restart the named service

    CLI Example:

        salt '*' service.restart <service name>
    

service.start:

    Start the specified service

    CLI Example:

        salt '*' service.start <service name>
    

service.status:

    Return the status for a service, returns the PID or an empty string if the
    service is running or not, pass a signature to use to find the service via
    ps

    CLI Example:

        salt '*' service.status <service name> [service signature]
    

service.stop:

    Stop the specified service

    CLI Example:

        salt '*' service.stop <service name>
    

shadow.info:

    Return information for the specified user
    This is just returns dummy data so that salt states can work.

    CLI Example:

        salt '*' shadow.info root
    

shadow.set_password:

    Set the password for a named user.

    CLI Example:

        salt '*' shadow.set_password root mysecretpassword
    

state.clear_cache:

    Clear out cached state files, forcing even cache runs to refresh the cache
    on the next state execution.

    Remember that the state cache is completely disabled by default, this
    execution only applies if cache=True is used in states

    CLI Example:

        salt '*' state.clear_cache
    

state.high:

    Execute the compound calls stored in a single set of high data
    This function is mostly intended for testing the state system

    CLI Example:

        salt '*' state.high '{"vim": {"pkg": ["installed"]}}'
    

state.highstate:

    Retrieve the state data from the salt master for this minion and execute it

    CLI Example:

        salt '*' state.highstate

        salt '*' state.highstate exclude=sls_to_exclude
        salt '*' state.highstate exclude="[{'id': 'id_to_exclude'}, {'sls': 'sls_to_exclude'}]"
    

state.low:

    Execute a single low data call
    This function is mostly intended for testing the state system

    CLI Example:

        salt '*' state.low '{"state": "pkg", "fun": "installed", "name": "vi"}'
    

state.pkg:

    Execute a packaged state run, the packaged state run will exist in a
    tarball available locally. This packaged state
    can be generated using salt-ssh.

    CLI Example:

        salt '*' state.pkg /tmp/state_pkg.tgz
    

state.running:

    Return a dict of state return data if a state function is already running.
    This function is used to prevent multiple state calls from being run at
    the same time.

    CLI Example:

        salt '*' state.running
    

state.show_highstate:

    Retrieve the highstate data from the salt master and display it

    CLI Example:

        salt '*' state.show_highstate
    

state.show_low_sls:

    Display the low data from a specific sls

    CLI Example:

        salt '*' state.show_low_sls foo
    

state.show_lowstate:

    List out the low data that will be applied to this minion

    CLI Example:

        salt '*' state.show_lowstate
    

state.show_sls:

    Display the state data from a specific sls or list of sls files on the
    master

    This function does not support topfiles.  For ``top.sls`` please use
    ``show_top`` instead.

    CLI Example:

        salt '*' state.show_sls core,edit.vim dev
    

state.show_top:

    Return the top data that the minion will use for a highstate

    CLI Example:

        salt '*' state.show_top
    

state.single:

    Execute a single state function with the named kwargs, returns False if
    insufficient data is sent to the command

    By default, the values of the kwargs will be parsed as YAML. So, you can
    specify lists values, or lists of single entry key-value maps, as you
    would in a YAML salt file. Alternatively, JSON format of keyword values
    is also supported.

    CLI Example:

        salt '*' state.single pkg.installed name=vim

    

state.sls:

    Execute a set list of state modules from an environment, default
    environment is base

    CLI Example:

        salt '*' state.sls core,edit.vim dev
        salt '*' state.sls core exclude="[{'id': 'id_to_exclude'}, {'sls': 'sls_to_exclude'}]"
    

state.template:

    Execute the information stored in a template file on the minion

    CLI Example:

        salt '*' state.template '<Path to template on the minion>'
    

state.template_str:

    Execute the information stored in a string from an sls template

    CLI Example:

        salt '*' state.template_str '<Template String>'
    

state.top:

    Execute a specific top file instead of the default

    CLI Example:

        salt '*' state.top reverse_top.sls
        salt '*' state.top reverse_top.sls exclude=sls_to_exclude
        salt '*' state.top reverse_top.sls exclude="[{'id': 'id_to_exclude'}, {'sls': 'sls_to_exclude'}]"
    

status.procs:

    Return the process data

    CLI Example:

        salt '*' status.procs
    

supervisord.add:

    Activates any updates in config for process/group.

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.add <name>
    

supervisord.custom:

    Run any custom supervisord command

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.custom "mstop '*gunicorn*'"
    

supervisord.remove:

    Removes process/group from active config

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.remove <name>
    

supervisord.reread:

    Reload the daemon's configuration files

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.reread
    

supervisord.restart:

    Restart the named service.

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.restart <service>
    

supervisord.start:

    Start the named service.

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.start <service>
    

supervisord.status:

    List programs and its state

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.status
    

supervisord.status_raw:

    Display the raw output of status

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.status_raw
    

supervisord.stop:

    Stop the named service.

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.stop <service>
    

supervisord.update:

    Reload config and add/remove as necessary

    user
        user to run supervisorctl as
    conf_file
        path to supervisorctl config file
    bin_env
        path to supervisorctl bin or path to virtualenv with supervisor installed

    CLI Example:

        salt '*' supervisord.update
    

sys.argspec:

    Return the argument specification of functions in Salt execution
    modules.

    CLI Example:

        salt '*' sys.argspec pkg.install
        salt '*' sys.argspec sys
        salt '*' sys.argspec
    

sys.doc:

    Return the docstrings for all modules. Optionally, specify a module or a
    function to narrow the selection.

    The strings are aggregated into a single document on the master for easy
    reading.

    Multiple modules/functions can be specified.

    CLI Example:

        salt '*' sys.doc
        salt '*' sys.doc sys
        salt '*' sys.doc sys.doc
        salt '*' sys.doc network.traceroute user.info
    

sys.list_functions:

    List the functions for all modules. Optionally, specify a module or modules
    from which to list.

    CLI Example:

        salt '*' sys.list_functions
        salt '*' sys.list_functions sys
        salt '*' sys.list_functions sys user
    

sys.list_modules:

    List the modules loaded on the minion

    CLI Example:

        salt '*' sys.list_modules
    

sys.reload_modules:

    Tell the minion to reload the execution modules

    CLI Example:

        salt '*' sys.reload_modules
    

system.halt:

    Halt a running system

    CLI Example:

        salt '*' system.halt
    

system.init:

    Change the system runlevel on sysV compatible systems

    CLI Example:

        salt '*' system.init 3
    

system.poweroff:

    Poweroff a running system

    CLI Example:

        salt '*' system.poweroff
    

system.reboot:

    Reboot the system

    CLI Example:

        salt '*' system.reboot
    

system.shutdown:

    Shutdown a running system

    CLI Example:

        salt '*' system.shutdown
    

system.shutdown_hard:

    Shutdown a running system with no timeout or warning

    CLI Example:

        salt '*' system.shutdown_hard
    

test.arg:

    Print out the data passed into the function ``*args`` and ```kwargs``, this
    is used to both test the publication data and cli argument passing, but
    also to display the information available within the publication data.
    Returns {"args": args, "kwargs": kwargs}.

    CLI Example:

        salt '*' test.arg 1 "two" 3.1 txt="hello" wow='{a: 1, b: "hello"}'
    

test.arg_repr:

    Print out the data passed into the function ``*args`` and ```kwargs``, this
    is used to both test the publication data and cli argument passing, but
    also to display the information available within the publication data.
    Returns {"args": repr(args), "kwargs": repr(kwargs)}.

    CLI Example:

        salt '*' test.arg_repr 1 "two" 3.1 txt="hello" wow='{a: 1, b: "hello"}'
    

test.arg_type:

    Print out the types of the args and kwargs. This is used to test the types
    of the args and kwargs passed down to the minion

    CLI Example:

           salt '*' test.arg_type 1 'int'
    

test.collatz:

    Execute the collatz conjecture from the passed starting number,
    returns the sequence and the time it took to compute. Used for
    performance tests.

    CLI Example:

        salt '*' test.collatz 3
    

test.conf_test:

    Return the value for test.foo in the minion configuration file, or return
    the default value

    CLI Example:

        salt '*' test.conf_test
    

test.cross_test:

    Execute a minion function via the __salt__ object in the test
    module, used to verify that the minion functions can be called
    via the __salt__ module.

    CLI Example:

        salt '*' test.cross_test file.gid_to_group 0
    

test.echo:

    Return a string - used for testing the connection

    CLI Example:

        salt '*' test.echo 'foo bar baz quo qux'
    

test.fib:

    Return a Fibonacci sequence up to the passed number, and the
    timeit took to compute in seconds. Used for performance tests

    CLI Example:

        salt '*' test.fib 3
    

test.get_opts:

    Return the configuration options passed to this minion

    CLI Example:

        salt '*' test.get_opts
    

test.kwarg:

    Print out the data passed into the function ``**kwargs``, this is used to
    both test the publication data and cli kwarg passing, but also to display
    the information available within the publication data.

    CLI Example:

        salt '*' test.kwarg num=1 txt="two" env='{a: 1, b: "hello"}'
    

test.not_loaded:

    List the modules that were not loaded by the salt loader system

    CLI Example:

        salt '*' test.not_loaded
    

test.opts_pkg:

    Return an opts package with the grains and opts for this minion.
    This is primarily used to create the options used for master side
    state compiling routines

    CLI Example:

        salt '*' test.opts_pkg
    

test.outputter:

    Test the outputter, pass in data to return

    CLI Example:

        salt '*' test.outputter foobar
    

test.ping:

    Just used to make sure the minion is up and responding
    Return True

    CLI Example:

        salt '*' test.ping
    

test.provider:

    Pass in a function name to discover what provider is being used

    CLI Example:

        salt '*' test.provider service
    

test.providers:

    Return a dict of the provider names and the files that provided them

    CLI Example:

        salt '*' test.providers
    

test.rand_sleep:

    Sleep for a random number of seconds, used to test long-running commands
    and minions returning at differing intervals

    CLI Example:

        salt '*' test.rand_sleep 60
    

test.retcode:

    Test that the returncode system is functioning correctly

    CLI Example:

        salt '*' test.retcode 42
    

test.sleep:

    Instruct the minion to initiate a process that will sleep for a given
    period of time.

    CLI Example:

        salt '*' test.sleep 20
    

test.tty:

    Echo a string to a specific tty

    CLI Example:

        salt '*' test.tty tty0 'This is a test'
        salt '*' test.tty pts3 'This is a test'
    

test.version:

    Return the version of salt on the minion

    CLI Example:

        salt '*' test.version
    

test.versions_information:

    Returns versions of components used by salt as a dict

    CLI Example:

        salt '*' test.versions_information
    

test.versions_report:

    Returns versions of components used by salt

    CLI Example:

        salt '*' test.versions_report
    

timezone.get_hwclock:

    Get current hardware clock setting (UTC or localtime)

    CLI Example:

        salt '*' timezone.get_hwclock
    

timezone.get_offset:

    Get current numeric timezone offset from UCT (i.e. -0700)

    CLI Example:

        salt '*' timezone.get_offset
    

timezone.get_zone:

    Get current timezone (i.e. America/Denver)

    CLI Example:

        salt '*' timezone.get_zone
    

timezone.get_zonecode:

    Get current timezone (i.e. PST, MDT, etc)

    CLI Example:

        salt '*' timezone.get_zonecode
    

timezone.set_hwclock:

    Sets the hardware clock to be either UTC or localtime

    CLI Example:

        salt '*' timezone.set_hwclock UTC
    

timezone.set_zone:

    Unlinks, then symlinks /etc/localtime to the set timezone.

    The timezone is crucial to several system processes, each of which SHOULD
    be restarted (for instance, whatever you system uses as its cron and
    syslog daemons). This will not be magically done for you!

    CLI Example:

        salt '*' timezone.set_zone 'America/Denver'
    

timezone.zone_compare:

    Checks the md5sum between the given timezone, and the one set in
    /etc/localtime. Returns True if they match, and False if not. Mostly useful
    for running state checks.

    Example:

        salt '*' timezone.zone_compare 'America/Denver'
    

user.add:

    Add a user to the minion

    CLI Example:

        salt '*' user.add name password
    

user.addgroup:

    Add user to a group

    CLI Example:

        salt '*' user.addgroup username groupname
    

user.chfullname:

    Change the full name of the user

    CLI Example:

        salt '*' user.chfullname user 'First Last'
    

user.chgroups:

    Change the groups this user belongs to, add append to append the specified
    groups

    CLI Example:

        salt '*' user.chgroups foo wheel,root True
    

user.chhome:

    Change the home directory of the user

    CLI Example:

        salt '*' user.chhome foo \\fileserver\home\foo
    

user.chprofile:

    Change the profile directory of the user

    CLI Example:

        salt '*' user.chprofile foo \\fileserver\profiles\foo
    

user.delete:

    Remove a user from the minion
    NOTE: purge and force have not been implemented on Windows yet

    CLI Example:

        salt '*' user.delete name
    

user.getent:

    Return the list of all info for all users

    CLI Example:

        salt '*' user.getent
    

user.info:

    Return user information

    CLI Example:

        salt '*' user.info root
    

user.list_groups:

    Return a list of groups the named user belongs to

    CLI Example:

        salt '*' user.list_groups foo
    

user.list_users:

    Return a list of users on Windows
    

user.removegroup:

    Remove user from a group

    CLI Example:

        salt '*' user.removegroup username groupname
    

user.setpassword:

    Set a user's password

    CLI Example:

        salt '*' user.setpassword name password
    

virtualenv.create:

    Create a virtualenv

    path
        The path to create the virtualenv
    venv_bin : None (default 'virtualenv')
        The name (and optionally path) of the virtualenv command. This can also
        be set globally in the minion config file as ``virtualenv.venv_bin``.
    no_site_packages : None
        Passthrough argument given to virtualenv if True. Deprecated since
        ``salt>=0.17.0``. Use ``system_site_packages=False`` instead.
    system_site_packages : False
        Passthrough argument given to virtualenv or pyvenv
    distribute : False
        Passthrough argument given to virtualenv
    pip : False
        Install pip after creating a virtual environment,
        implies distribute=True
    clear : False
        Passthrough argument given to virtualenv or pyvenv
    python : None (default)
        Passthrough argument given to virtualenv
    extra_search_dir : None (default)
        Passthrough argument given to virtualenv
    never_download : None (default)
        Passthrough argument given to virtualenv if True
    prompt : None (default)
        Passthrough argument given to virtualenv if not None
    symlinks : None
        Passthrough argument given to pyvenv if True
    upgrade : None
        Passthrough argument given to pyvenv if True
    runas : None
        Set ownership for the virtualenv

    CLI Example:

        salt '*' virtualenv.create /path/to/new/virtualenv
    

virtualenv.get_site_packages:

    Returns the path to the site-packages directory inside a virtualenv

    CLI Example:

        salt '*' virtualenv.get_site_packages /path/to/my/venv
    

win_dns_client.add_dns:

    Add the DNS server to the network interface
    (index starts from 1)

    Note: if the interface DNS is configured by DHCP, all the DNS servers will
    be removed from the interface and the requested DNS will be the only one

    CLI Example:

        salt '*' win_dns_client.add_dns <interface> <index>
    

win_dns_client.dns_dhcp:

    Configure the interface to get its DNS servers from the DHCP server

    CLI Example:

        salt '*' win_dns_client.dns_dhcp <interface>
    

win_dns_client.get_dns_config:

    Get the type of DNS configuration (dhcp / static)

    CLI Example:

        salt '*' win_dns_client.get_dns_config 'Local Area Connection'
    

win_dns_client.get_dns_servers:

    Return a list of the configured DNS servers of the specified interface

    CLI Example:

        salt '*' win_dns_client.get_dns_servers 'Local Area Connection'
    

win_dns_client.rm_dns:

    Remove the DNS server to the network interface

    CLI Example:

        salt '*' win_dns_client.rm_dns <interface>
    

win_path.add:

    Add the directory to the SYSTEM path in the index location

    CLI Example:

        # Will add to the beginning of the path
        salt '*' win_path.add 'c:\python27' 0

        # Will add to the end of the path
        salt '*' win_path.add 'c:\python27' index='-1'
    

win_path.exists:

    Check if the directory is configured in the SYSTEM path
    Case-insensitive and ignores trailing backslash

    CLI Example:

        salt '*' win_path.exists 'c:\python27'
        salt '*' win_path.exists 'c:\python27\'
        salt '*' win_path.exists 'C:\pyThon27'
    

win_path.get_path:

    Returns the system path
    

win_path.rehash:

    Send a WM_SETTINGCHANGE Broadcast to Windows to rehash the Environment variables
    

win_path.remove:

    Remove the directory from the SYSTEM path
    

win_servermanager.install:

    Install a feature

    Note:
    Some features requires reboot after un/installation, if so until the server is restarted
    Other features can not be installed !

    Note:
    Some features takes a long time to complete un/installation, set -t with a long timeout

    CLI Example:

        salt '*' win_servermanager.install Telnet-Client
        salt '*' win_servermanager.install SNMP-Services True
    

win_servermanager.list_available:

    List available features to install

    CLI Example:

        salt '*' win_servermanager.list_available
    

win_servermanager.list_installed:

    List installed features

    CLI Example:

        salt '*' win_servermanager.list_installed
    

win_servermanager.remove:

    Remove an installed feature

    Note:
        Some features require a reboot after installation/uninstallation. If
        one of these features are modified, then other features cannot be
        installed until the server is restarted. Additionally, some features
        take a while to complete installation/uninstallation, so it is a good
        idea to use the ``-t`` option to set a longer timeout.

    CLI Example:

        salt -t 600 '*' win_servermanager.remove Telnet-Client
    

winrepo.genrepo:

    Generate win_repo_cachefile based on sls files in the win_repo

    CLI Example:

        salt-call winrepo.genrepo -c c:\salt\conf
    

winrepo.update_git_repos:

    Checkout git repos containing Windows Software Package Definitions

    Note: This function will not work unless git is installed and the git
          module is further updated to work on Windows.
          In the meantime just place all Windows package files in
      the 'win_repo' directory.
    

